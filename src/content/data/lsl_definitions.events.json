{
	"at_rot_target": {
		"arguments": [
			{
				"TargetNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"TargetRotation": {
					"tooltip": "",
					"type": "rotation"
				}
			},
			{
				"CurrentRotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"tooltip": "This event is triggered when a script comes within a defined angle of a target rotation. The range and rotation, are set by a call to llRotTarget."
	},
	"at_target": {
		"arguments": [
			{
				"TargetNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"TargetPosition": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"CurrentPosition": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"tooltip": "This event is triggered when the scripted object comes within a defined range of the target position, defined by the llTarget function call."
	},
	"attach": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"tooltip": "This event is triggered whenever an object is attached or detached from an avatar. If it is attached, the key of the avatar it is attached to is passed in, otherwise NULL_KEY is."
	},
	"changed": {
		"arguments": [
			{
				"Changed": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "Triggered when various events change the object. The change argument will be a bit-field of CHANGED_* constants."
	},
	"collision": {
		"arguments": [
			{
				"NumberOfCollisions": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised while another object, or avatar, is colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* functions."
	},
	"collision_end": {
		"arguments": [
			{
				"NumberOfCollisions": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised when another object, or avatar, stops colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* library functions."
	},
	"collision_start": {
		"arguments": [
			{
				"NumberOfCollisions": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised when another object, or avatar, starts colliding with the object the script is attached to.\n\t\t\tThe number of detected objects is passed to the script. Information on those objects may be gathered via the llDetected* library functions."
	},
	"control": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Levels": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Edges": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "Once a script has the ability to grab control inputs from the avatar, this event will be used to pass the commands into the script.\n\t\t\tThe levels and edges are bit-fields of control constants."
	},
	"dataserver": {
		"arguments": [
			{
				"RequestID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Data": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "This event is triggered when the requested data is returned to the script.\n\t\t\tData may be requested by the llRequestAgentData, llRequestInventoryData, and llGetNotecardLine function calls, for example."
	},
	"email": {
		"arguments": [
			{
				"Time": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Address": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Subject": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Body": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"NumberRemaining": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is triggered when an email sent to this script arrives.\n\t\t\tThe number remaining tells how many more emails are known to be still pending."
	},
	"experience_permissions": {
		"arguments": [
			{
				"agent_id": {
					"tooltip": "ID of the agent approving permission for the Experience.",
					"type": "key"
				}
			}
		],
		"tooltip": "Triggered when an agent has approved an experience permissions request."
	},
	"experience_permissions_denied": {
		"arguments": [
			{
				"agent_id": {
					"tooltip": "ID of the agent denying permission for the Experience.",
					"type": "key"
				}
			},
			{
				"Reason": {
					"tooltip": "One of the XP_ERROR_... constants describing the reason why the Experience permissions were denied for the agent.",
					"type": "integer"
				}
			}
		],
		"tooltip": "Describes why the Experience permissions were denied for the agent."
	},
	"final_damage": {
		"arguments": [
			{
				"count": {
					"tooltip": "The number of damage events queued.",
					"type": "integer"
				}
			}
		],
		"tooltip": "Triggered as damage is applied to an avatar or task, after all on_damage events have been processed."
	},
	"game_control": {
		"arguments": [
			{
				"id": {
					"tooltip": "UUID of avatar supplying input",
					"type": "key"
				}
			},
			{
				"buttons": {
					"tooltip": "32-bit mask of buttons pressed",
					"type": "integer"
				}
			},
			{
				"axes": {
					"tooltip": "Six float values in range [-1, 1]",
					"type": "list"
				}
			}
		],
		"tooltip": "This event is raised when game controller input changes."
	},
	"http_request": {
		"arguments": [
			{
				"HTTPRequestID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"HTTPMethod": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Body": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "Triggered when task receives an HTTP request."
	},
	"http_response": {
		"arguments": [
			{
				"HTTPRequestID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Status": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Metadata": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Body": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "This event handler is invoked when an HTTP response is received for a pending llHTTPRequest request or if a pending request fails or times out."
	},
	"land_collision": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"tooltip": "This event is raised when the object the script is attached to is colliding with the ground."
	},
	"land_collision_end": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"tooltip": "This event is raised when the object the script is attached to stops colliding with the ground."
	},
	"land_collision_start": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"tooltip": "This event is raised when the object the script is attached to begins to collide with the ground."
	},
	"link_message": {
		"arguments": [
			{
				"SendersLink": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"tooltip": "Triggered when object receives a link message via llMessageLinked function call."
	},
	"linkset_data": {
		"arguments": [
			{
				"action": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"name": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"value": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "Triggered when a script modifies the linkset datastore."
	},
	"listen": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Name": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "This event is raised whenever a chat message matching the constraints set in the llListen command is received. The name and ID of the speaker, as well as the message, are passed in as parameters.\n\t\t\tChannel 0 is the public chat channel that all avatars see as chat text. Channels 1 through 2,147,483,648 are private channels that are not sent to avatars but other scripts can listen on those channels."
	},
	"money": {
		"arguments": [
			{
				"Payer": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Amount": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is triggered when a resident has given an amount of Linden dollars to the object."
	},
	"moving_end": {
		"arguments": null,
		"tooltip": "Triggered whenever an object with this script stops moving."
	},
	"moving_start": {
		"arguments": null,
		"tooltip": "Triggered whenever an object with this script starts moving."
	},
	"no_sensor": {
		"arguments": null,
		"tooltip": "This event is raised when sensors are active, via the llSensor function call, but are not sensing anything."
	},
	"not_at_rot_target": {
		"arguments": null,
		"tooltip": "When a target is set via the llRotTarget function call, but the script is outside the specified angle this event is raised."
	},
	"not_at_target": {
		"arguments": null,
		"tooltip": "When a target is set via the llTarget library call, but the script is outside the specified range this event is raised."
	},
	"object_rez": {
		"arguments": [
			{
				"RezzedObjectsID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"tooltip": "Triggered when an object rezzes another object from its inventory via the llRezObject, or similar, functions. The id is the globally unique key for the object rezzed."
	},
	"on_damage": {
		"arguments": [
			{
				"count": {
					"tooltip": "The number of damage events queued.",
					"type": "integer"
				}
			}
		],
		"tooltip": "Triggered when an avatar or object receives damage."
	},
	"on_death": {
		"arguments": [],
		"tooltip": "Triggered when an avatar reaches 0 health."
	},
	"on_rez": {
		"arguments": [
			{
				"StartParameter": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "Triggered whenever an object is rezzed from inventory or by another object. The start parameter is passed in from the llRezObject call, or zero if from inventory."
	},
	"path_update": {
		"arguments": [
			{
				"Type": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Reserved": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"tooltip": "This event is called to inform the script of changes within the object's path-finding status."
	},
	"remote_data": {
		"arguments": [
			{
				"EventType": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"ChannelID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"MessageID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Sender": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"IData": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"SData": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"tooltip": "This event is deprecated."
	},
	"run_time_permissions": {
		"arguments": [
			{
				"PermissionFlags": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "Scripts need permission from either the owner or the avatar they wish to act on before they may perform certain functions, such as debiting money from their owners account, triggering an animation on an avatar, or capturing control inputs. The llRequestPermissions library function is used to request these permissions and the various permissions integer constants can be supplied.\n\t\t\tThe integer returned to this event handler contains the current set of permissions flags, so if permissions equal 0 then no permissions are set."
	},
	"sensor": {
		"arguments": [
			{
				"NumberDetected": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised whenever objects matching the constraints of the llSensor command are detected.\n\t\t\tThe number of detected objects is passed to the script in the parameter. Information on those objects may be gathered via the llDetected* functions."
	},
	"state_entry": {
		"arguments": null,
		"tooltip": "The state_entry event occurs whenever a new state is entered, including at program start, and is always the first event handled."
	},
	"state_exit": {
		"arguments": null,
		"tooltip": "The state_exit event occurs whenever the state command is used to transition to another state. It is handled before the new states state_entry event."
	},
	"timer": {
		"arguments": null,
		"tooltip": "This event is raised at regular intervals set by the llSetTimerEvent library function."
	},
	"touch": {
		"arguments": [
			{
				"NumberOfTouches": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised while a user is touching the object the script is attached to.\n\t\t\tThe number of touching objects is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected* library functions."
	},
	"touch_end": {
		"arguments": [
			{
				"NumberOfTouches": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised when a user stops touching the object the script is attached to. The number of touches is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected* library functions."
	},
	"touch_start": {
		"arguments": [
			{
				"NumberOfTouches": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"tooltip": "This event is raised when a user first touches the object the script is attached to. The number of touches is passed to the script in the parameter.\n\t\t\tInformation on those objects may be gathered via the llDetected() library functions."
	},
	"transaction_result": {
		"arguments": [
			{
				"RequestID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Success": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Message": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"tooltip": "Triggered by llTransferMoney() function."
	}
}
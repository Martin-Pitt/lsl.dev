{
	"llAbs": {
		"arguments": [
			{
				"Value": {
					"tooltip": "An integer value.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 6,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the absolute (positive) version of Value."
	},
	"llAcos": {
		"arguments": [
			{
				"Value": {
					"tooltip": "A floating-point value.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 172,
		"native": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the arc-cosine of Value, in radians."
	},
	"llAddToLandBanList": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Agent UUID to add to ban-list.",
					"type": "key"
				}
			},
			{
				"Hours": {
					"tooltip": "Period, in hours, to ban the avatar for.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 310,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Add avatar ID to the parcel ban list for the specified number of Hours.\\nA value of 0 for Hours will add the agent indefinitely.\\nThe smallest value that Hours will accept is 0.01; anything smaller will be seen as 0.\\nWhen values that small are used, it seems the function bans in approximately 30 second increments (Probably 36 second increments, as 0.01 of an hour is 36 seconds).\\nResidents teleporting to a parcel where they are banned will be redirected to a neighbouring parcel."
	},
	"llAddToLandPassList": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Agent UUID to add to pass-list.",
					"type": "key"
				}
			},
			{
				"Hours": {
					"tooltip": "Period, in hours, to allow the avatar for.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 240,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Add avatar ID to the land pass list, for a duration of Hours."
	},
	"llAdjustDamage": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "Damage event index to modify.",
					"type": "integer"
				}
			},
			{
				"Damage": {
					"tooltip": "New damage amount to apply on this event.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 555,
		"return": "void",
		"sleep": 0,
		"tooltip": "Changes the amount of damage to be delivered by this damage event."
	},
	"llAdjustSoundVolume": {
		"arguments": [
			{
				"Volume": {
					"tooltip": "The volume to set.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 207,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Adjusts the volume (0.0 - 1.0) of the currently playing attached sound.\\nThis function has no effect on sounds started with llTriggerSound."
	},
	"llAgentInExperience": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"experience": true,
		"func-id": 392,
		"return": "integer",
		"sleep": 0,
		"tooltip": "\n                   Returns TRUE if the agent is in the Experience and the Experience can run in the current location.\n                "
	},
	"llAllowInventoryDrop": {
		"arguments": [
			{
				"Flag": {
					"tooltip": "Boolean, If TRUE allows anyone to drop inventory on prim, FALSE revokes.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 176,
		"return": "void",
		"sleep": 0,
		"tooltip": "If Flag == TRUE, users without object modify permissions can still drop inventory items into the object."
	},
	"llAngleBetween": {
		"arguments": [
			{
				"Rot1": {
					"tooltip": "First rotation.",
					"type": "rotation"
				}
			},
			{
				"Rot2": {
					"tooltip": "Second rotation.",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 174,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the angle, in radians, between rotations Rot1 and Rot2."
	},
	"llApplyImpulse": {
		"arguments": [
			{
				"Force": {
					"tooltip": "Amount of impulse force to apply.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "Boolean, if TRUE, force is treated as a local directional vector instead of region directional vector.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 72,
		"return": "void",
		"sleep": 0,
		"tooltip": "Applies impulse to the object.\\nIf Local == TRUE, apply the Force in local coordinates; otherwise, apply the Force in global coordinates.\\nThis function only works on physical objects."
	},
	"llApplyRotationalImpulse": {
		"arguments": [
			{
				"Force": {
					"tooltip": "Amount of impulse force to apply.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "Boolean, if TRUE, uses local axis, if FALSE, uses region axis.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 73,
		"return": "void",
		"sleep": 0,
		"tooltip": "Applies rotational impulse to the object.\\nIf Local == TRUE, apply the Force in local coordinates; otherwise, apply the Force in global coordinates.\\nThis function only works on physical objects."
	},
	"llAsin": {
		"arguments": [
			{
				"Value": {
					"tooltip": "A floating-point value.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 173,
		"native": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the arc-sine, in radians, of Value."
	},
	"llAtan2": {
		"arguments": [
			{
				"y": {
					"tooltip": "A floating-point value.",
					"type": "float"
				}
			},
			{
				"x": {
					"tooltip": "A floating-point value.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 3,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the arc-tangent2 of y, x."
	},
	"llAttachToAvatar": {
		"arguments": [
			{
				"AttachmentPoint": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 113,
		"return": "void",
		"sleep": 0,
		"tooltip": "Attach to avatar at point AttachmentPoint.\\nRequires the PERMISSION_ATTACH runtime permission."
	},
	"llAttachToAvatarTemp": {
		"arguments": [
			{
				"AttachPoint": {
					"tooltip": "Valid attachment point or ATTACH_* constant.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 391,
		"return": "void",
		"sleep": 0,
		"tooltip": "Follows the same convention as llAttachToAvatar, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect."
	},
	"llAvatarOnLinkSitTarget": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 376,
		"return": "key",
		"sleep": 0,
		"tooltip": "If an avatar is sitting on the link's sit target, return the avatar's key, NULL_KEY otherwise.\\nReturns a key that is the UUID of the user seated on the specified link's prim."
	},
	"llAvatarOnSitTarget": {
		"arguments": [],
		"energy": 10,
		"func-id": 239,
		"return": "key",
		"sleep": 0,
		"tooltip": "If an avatar is seated on the sit target, returns the avatar's key, otherwise NULL_KEY.\\nThis only will detect avatars sitting on sit targets defined with llSitTarget."
	},
	"llAxes2Rot": {
		"arguments": [
			{
				"Forward": {
					"tooltip": "Forward/Back part of rotation.",
					"type": "vector"
				}
			},
			{
				"Left": {
					"tooltip": "Left/Right part of rotation.",
					"type": "vector"
				}
			},
			{
				"Up": {
					"tooltip": "Up/Down part of rotation.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 17,
		"pure": true,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation represented by coordinate axes Forward, Left, and Up."
	},
	"llAxisAngle2Rot": {
		"arguments": [
			{
				"Axis": {
					"tooltip": "Axis.",
					"type": "vector"
				}
			},
			{
				"Angle": {
					"tooltip": "Angle in radians.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 169,
		"pure": true,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation that is a generated Angle about Axis."
	},
	"llBase64ToInteger": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 281,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer that is the Text, Base64 decoded as a big endian integer.\\nReturns zero if Text is longer then 8 characters. If Text contains fewer then 6 characters, the return value is unpredictable."
	},
	"llBase64ToString": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 261,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Converts a Base64 string to a conventional string.\\nIf the conversion creates any unprintable characters, they are converted to question marks."
	},
	"llBreakAllLinks": {
		"arguments": [],
		"energy": 10,
		"func-id": 143,
		"return": "void",
		"sleep": 0,
		"tooltip": "De-links all prims in the link set (requires permission PERMISSION_CHANGE_LINKS be set)."
	},
	"llBreakLink": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 142,
		"return": "void",
		"sleep": 0,
		"tooltip": "De-links the prim with the given link number (requires permission PERMISSION_CHANGE_LINKS be set)."
	},
	"llCSV2List": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 196,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Create a list from a string of comma separated values specified in Text."
	},
	"llCastRay": {
		"arguments": [
			{
				"Start": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"End": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Options": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 363,
		"return": "list",
		"sleep": 0,
		"tooltip": "Casts a ray into the physics world from 'start' to 'end' and returns data according to details in Options.\\nReports collision data for intersections with objects.\\nReturn value: [UUID_1, {link_number_1}, hit_position_1, {hit_normal_1}, UUID_2, {link_number_2}, hit_position_2, {hit_normal_2}, ... , status_code] where {} indicates optional data."
	},
	"llCeil": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 10,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns smallest integer value >= Value."
	},
	"llChar": {
		"arguments": [
			{
				"value": {
					"tooltip": "Unicode value to convert into a string.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 526,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a single character string that is the representation of the unicode value."
	},
	"llClearCameraParams": {
		"arguments": [],
		"energy": 10,
		"func-id": 314,
		"return": "void",
		"sleep": 0,
		"tooltip": "Resets all camera parameters to default values and turns off scripted camera control."
	},
	"llClearExperience": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"ExperienceID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 411,
		"private": true,
		"return": "void",
		"sleep": 0,
		"tooltip": ""
	},
	"llClearExperiencePermissions": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 385,
		"private": true,
		"return": "void",
		"sleep": 0,
		"tooltip": ""
	},
	"llClearLinkMedia": {
		"arguments": [
			{
				"Link": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 373,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Clears (deletes) the media and all parameters from the given Face on the linked prim.\\nReturns an integer that is a STATUS_* flag, which details the success/failure of the operation."
	},
	"llClearPrimMedia": {
		"arguments": [
			{
				"Face": {
					"tooltip": "Number of side to clear.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 352,
		"return": "integer",
		"sleep": 1,
		"tooltip": "Clears (deletes) the media and all parameters from the given Face.\\nReturns an integer that is a STATUS_* flag which details the success/failure of the operation."
	},
	"llCloseRemoteDataChannel": {
		"arguments": [
			{
				"ChannelID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 257,
		"return": "void",
		"sleep": 1,
		"tooltip": "This function is deprecated."
	},
	"llCloud": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 43,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the cloud density at the object's position + Offset."
	},
	"llCollisionFilter": {
		"arguments": [
			{
				"ObjectName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"ObjectID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Accept": {
					"tooltip": "If TRUE, only accept collisions with ObjectName name AND ObjectID (either is optional), otherwise with objects not ObjectName AND ObjectID.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 110,
		"return": "void",
		"sleep": 0,
		"tooltip": "Specify an empty string or NULL_KEY for Accept, to not filter on the corresponding parameter."
	},
	"llCollisionSound": {
		"arguments": [
			{
				"ImpactSound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"ImpactVolume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 160,
		"return": "void",
		"sleep": 0,
		"tooltip": "Suppress default collision sounds, replace default impact sounds with ImpactSound.\\nThe ImpactSound must be in the object inventory.\\nSupply an empty string to suppress collision sounds."
	},
	"llCollisionSprite": {
		"arguments": [
			{
				"ImpactSprite": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 161,
		"return": "void",
		"sleep": 0,
		"tooltip": "Suppress default collision sprites, replace default impact sprite with ImpactSprite; found in the object inventory (empty string to just suppress)."
	},
	"llComputeHash": {
		"arguments": [
			{
				"Message": {
					"tooltip": "The message to be hashed.",
					"type": "string"
				}
			},
			{
				"Algorithm": {
					"tooltip": "The digest algorithm: md5, sha1, sha224, sha256, sha384, sha512.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 548,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns hex-encoded Hash string of Message using digest Algorithm."
	},
	"llCos": {
		"arguments": [
			{
				"Theta": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 1,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the cosine of Theta (Theta in radians)."
	},
	"llCreateCharacter": {
		"arguments": [
			{
				"Options": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 399,
		"return": "void",
		"sleep": 0,
		"tooltip": "Convert link-set to AI/Physics character.\\nCreates a path-finding entity, known as a \"character\", from the object containing the script. Required to activate use of path-finding functions.\\nOptions is a list of key/value pairs."
	},
	"llCreateKeyValue": {
		"arguments": [
			{
				"Key": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 387,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction to create a key-value pair. Will fail with XP_ERROR_STORAGE_EXCEPTION if the key already exists. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value passed to the function.\n                "
	},
	"llCreateLink": {
		"arguments": [
			{
				"TargetPrim": {
					"tooltip": "Object UUID that is in the same region.",
					"type": "key"
				}
			},
			{
				"Parent": {
					"tooltip": "If FALSE, then TargetPrim becomes the root. If TRUE, then the script's object becomes the root.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 141,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Attempt to link the object the script is in, to target (requires permission PERMISSION_CHANGE_LINKS be set).\\nRequires permission PERMISSION_CHANGE_LINKS be set."
	},
	"llDamage": {
		"arguments": [
			{
				"target": {
					"tooltip": "Agent or task to receive damage.",
					"type": "key"
				}
			},
			{
				"damage": {
					"tooltip": "Damage amount to inflict on this target.",
					"type": "float"
				}
			},
			{
				"type": {
					"tooltip": "Damage type to inflict on this target.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 671,
		"return": "void",
		"sleep": 0,
		"tooltip": "Generates a damage event on the targeted agent or task."
	},
	"llDataSizeKeyValue": {
		"arguments": [],
		"energy": 10,
		"experience": true,
		"func-id": 600,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction the request the used and total amount of data allocated for the Experience. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the the amount in use and the third item will be the total available.\n                "
	},
	"llDeleteCharacter": {
		"arguments": [],
		"energy": 10,
		"func-id": 405,
		"return": "void",
		"sleep": 0,
		"tooltip": "Convert link-set from AI/Physics character to Physics object.\\nConvert the current link-set back to a standard object, removing all path-finding properties."
	},
	"llDeleteKeyValue": {
		"arguments": [
			{
				"Key": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 390,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction to delete a key-value pair. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key.\n                "
	},
	"llDeleteSubList": {
		"arguments": [
			{
				"Source": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 193,
		"native": true,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Removes the slice from start to end and returns the remainder of the list.\\nRemove a slice from the list and return the remainder, start and end are inclusive.\\nUsing negative numbers for start and/or end causes the index to count backwards from the length of the list, so 0, -1 would delete the entire list.\\nIf Start is larger than End the list deleted is the exclusion of the entries; so 6, 4 would delete the entire list except for the 5th. list entry."
	},
	"llDeleteSubString": {
		"arguments": [
			{
				"Source": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 95,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Removes the indicated sub-string and returns the result.\\nStart and End are inclusive.\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would delete the entire string.\\nIf Start is larger than End, the sub-string is the exclusion of the entries; so 6, 4 would delete the entire string except for the 5th. character."
	},
	"llDerezObject": {
		"arguments": [
			{
				"ID": {
					"tooltip": "The ID of an object in the region.",
					"type": "key"
				}
			},
			{
				"flags": {
					"tooltip": "Flags for derez behavior.",
					"type": "integer"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 509,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Derezzes an object previously rezzed by a script in this region. Returns TRUE on success or FALSE if the object could not be derezzed."
	},
	"llDetachFromAvatar": {
		"arguments": [],
		"energy": 10,
		"func-id": 114,
		"return": "void",
		"sleep": 0,
		"tooltip": "Remove the object containing the script from the avatar."
	},
	"llDetectedDamage": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 554,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list containing the current damage for the event, the damage type and the original damage delivered."
	},
	"llDetectedGrab": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 37,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the grab offset of a user touching the object.\\nReturns <0.0, 0.0, 0.0> if Number is not a valid object."
	},
	"llDetectedGroup": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 39,
		"return": "integer",
		"bool_semantics": true,
		"sleep": 0,
		"tooltip": "Returns TRUE if detected object or agent Number has the same user group active as this object.\\nIt will return FALSE if the object or agent is in the group, but the group is not active."
	},
	"llDetectedKey": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 32,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of detected object or avatar number.\\nReturns NULL_KEY if Number is not a valid index."
	},
	"llDetectedLinkNumber": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 40,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the link position of the triggered event for touches and collisions only.\\n0 for a non-linked object, 1 for the root of a linked object, 2 for the first child, etc."
	},
	"llDetectedName": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 31,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of detected object or avatar number.\\nReturns the name of detected object number.\\nReturns empty string if Number is not a valid index."
	},
	"llDetectedOwner": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 33,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of detected object's owner.\\nReturns invalid key if Number is not a valid index."
	},
	"llDetectedPos": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 35,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the position of detected object or avatar number.\\nReturns <0.0, 0.0, 0.0> if Number is not a valid index."
	},
	"llDetectedRezzer": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 553,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key for the rezzer of the detected object."
	},
	"llDetectedRot": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 38,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation of detected object or avatar number.\\nReturns <0.0, 0.0, 0.0, 1.0> if Number is not a valid offset."
	},
	"llDetectedTouchBinormal": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detection information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 341,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the surface bi-normal for a triggered touch event.\\nReturns a vector that is the surface bi-normal (tangent to the surface) where the touch event was triggered."
	},
	"llDetectedTouchFace": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detection information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 338,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the index of the face where the avatar clicked in a triggered touch event."
	},
	"llDetectedTouchNormal": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detection information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 340,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the surface normal for a triggered touch event.\\nReturns a vector that is the surface normal (perpendicular to the surface) where the touch event was triggered."
	},
	"llDetectedTouchPos": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detected information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 339,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the position, in region coordinates, where the object was touched in a triggered touch event.\\nUnless it is a HUD, in which case it returns the position relative to the attach point."
	},
	"llDetectedTouchST": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detection information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 342,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a vector that is the surface coordinates where the prim was touched.\\nThe X and Y vector positions contain the horizontal (S) and vertical (T) face coordinates respectively.\\nEach component is in the interval [0.0, 1.0].\\nTOUCH_INVALID_TEXCOORD is returned if the surface coordinates cannot be determined (e.g. when the viewer does not support this function)."
	},
	"llDetectedTouchUV": {
		"arguments": [
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index of detection information",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 337,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a vector that is the texture coordinates for where the prim was touched.\\nThe X and Y vector positions contain the U and V face coordinates respectively.\\nTOUCH_INVALID_TEXCOORD is returned if the touch UV coordinates cannot be determined (e.g. when the viewer does not support this function)."
	},
	"llDetectedType": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 34,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object.\\nReturns 0 if number is not a valid index.\\nNote that number is a bit-field, so comparisons need to be a bitwise checked. e.g.:\\ninteger iType = llDetectedType(0);\\n{\\n\t// ...do stuff with the agent\\n}"
	},
	"llDetectedVel": {
		"arguments": [
			{
				"Number": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 36,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the velocity of the detected object Number.\\nReturns<0.0, 0.0, 0.0> if Number is not a valid offset."
	},
	"llDialog": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Buttons": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 247,
		"return": "void",
		"sleep": 1,
		"tooltip": "Shows a dialog box on the avatar's screen with the message.\\n\n                    Up to 12 strings in the list form buttons.\\n\n                    If a button is clicked, the name is chatted on Channel.\\nOpens a \"notify box\" in the given avatars screen displaying the message.\\n\n                Up to twelve buttons can be specified in a list of strings. When the user clicks a button, the name of the button is said on the specified channel.\\n\n                Channels work just like llSay(), so channel 0 can be heard by everyone.\\n\n                The chat originates at the object's position, not the avatar's position, even though it is said as the avatar (uses avatar's UUID and Name etc.).\\n\n                Examples:\\n\n                llDialog(who, \"Are you a boy or a girl?\", [ \"Boy\", \"Girl\" ], -4913);\\n\n                llDialog(who, \"This shows only an OK button.\", [], -192);\\n\n                llDialog(who, \"This chats so you can 'hear' it.\", [\"Hooray\"], 0);"
	},
	"llDie": {
		"arguments": [],
		"energy": 0,
		"func-id": 41,
		"return": "void",
		"sleep": 0,
		"tooltip": "Delete the object which holds the script."
	},
	"llDumpList2String": {
		"arguments": [
			{
				"Source": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Separator": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 245,
		"native": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the list as a single string, using Separator between the entries.\\nWrite the list out as a single string, using Separator between values."
	},
	"llEdgeOfWorld": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Direction": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 205,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Checks to see whether the border hit by Direction from Position is the edge of the world (has no neighboring region).\\nReturns TRUE if the line along Direction from Position hits the edge of the world in the current simulator, returns FALSE if that edge crosses into another simulator."
	},
	"llEjectFromLand": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 213,
		"return": "void",
		"sleep": 0,
		"tooltip": "Ejects AvatarID from land that you own.\\nEjects AvatarID from land that the object owner (group or resident) owns."
	},
	"llEmail": {
		"arguments": [
			{
				"Address": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Subject": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 119,
		"return": "void",
		"sleep": 20,
		"tooltip": "Sends email to Address with Subject and Message.\\nSends an email to Address with Subject and Message."
	},
	"llEscapeURL": {
		"arguments": [
			{
				"URL": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 307,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns an escaped/encoded version of url, replacing spaces with %20 etc.\\nReturns the string that is the URL-escaped version of URL (replacing spaces with %20, etc.).\\n\n                This function returns the UTF-8 encoded escape codes for selected characters."
	},
	"llEuler2Rot": {
		"arguments": [
			{
				"Vector": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 16,
		"pure": true,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation representation of the Euler angles.\\nReturns the rotation represented by the Euler Angle."
	},
	"llEvade": {
		"arguments": [
			{
				"TargetID": {
					"tooltip": "Agent or object to evade.",
					"type": "key"
				}
			},
			{
				"Options": {
					"tooltip": "No options yet.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 407,
		"return": "void",
		"sleep": 0,
		"tooltip": "Evade a specified target.\\nCharacters will (roughly) try to hide from their pursuers if there is a good hiding spot along their fleeing path. Hiding means no direct line of sight from the head of the character (centre of the top of its physics bounding box) to the head of its pursuer and no direct path between the two on the navigation-mesh."
	},
	"llExecCharacterCmd": {
		"arguments": [
			{
				"Command": {
					"tooltip": "Command to send.",
					"type": "integer"
				}
			},
			{
				"Options": {
					"tooltip": "Height for CHARACTER_CMD_JUMP.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 404,
		"return": "void",
		"sleep": 0,
		"tooltip": "Execute a character command.\\nSend a command to the path system.\\nCurrently only supports stopping the current path-finding operation or causing the character to jump."
	},
	"llFabs": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 7,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the positive version of Value.\\nReturns the absolute value of Value."
	},
	"llFindNotecardTextCount": {
		"arguments": [
			{
				"NotecardName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Pattern": {
					"tooltip": "Regex pattern to find in the notecard text.",
					"type": "string"
				}
			},
			{
				"Options": {
					"tooltip": "A list of options to control the search. Included for future expansion, should be []",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 507,
		"return": "key",
		"sleep": 0,
		"tooltip": "Searches the text of a cached notecard for lines containing the given pattern and returns the \n            number of matches found through a dataserver event.\n            "
	},
	"llFindNotecardTextSync": {
		"arguments": [
			{
				"NotecardName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Pattern": {
					"tooltip": "Regex pattern to find in the notecard text.",
					"type": "string"
				}
			},
			{
				"StartMatch": {
					"tooltip": "The number of matches to skip before returning values.",
					"type": "integer"
				}
			},
			{
				"Count": {
					"tooltip": "The maximum number of matches to return. If 0 this function will return the first 64 matches found.",
					"type": "integer"
				}
			},
			{
				"Options": {
					"tooltip": "A list of options to control the search. Included for future expansion, should be []",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 508,
		"return": "list",
		"sleep": 0,
		"tooltip": "Searches the text of a cached notecard for lines containing the given pattern. \n            Returns a list of line numbers and column where a match is found. If the notecard is not in\n            the cache it returns a list containing a single entry of NAK. If no matches are found an\n            empty list is returned."
	},
	"llFleeFrom": {
		"arguments": [
			{
				"Source": {
					"tooltip": "Global coordinate from which to flee.",
					"type": "vector"
				}
			},
			{
				"Distance": {
					"tooltip": "Distance in meters to flee from the source.",
					"type": "float"
				}
			},
			{
				"Options": {
					"tooltip": "No options available at this time.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 402,
		"return": "void",
		"sleep": 0,
		"tooltip": "Flee from a point.\\nDirects a character (llCreateCharacter) to keep away from a defined position in the region or adjacent regions."
	},
	"llFloor": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 9,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns largest integer value <= Value."
	},
	"llForceMouselook": {
		"arguments": [
			{
				"Enable": {
					"tooltip": "Boolean, if TRUE when an avatar sits on the prim, the avatar will be forced into mouse-look mode.\\nFALSE is the default setting and will undo a previously set TRUE or do nothing.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 294,
		"return": "void",
		"sleep": 0,
		"tooltip": "If Enable is TRUE any avatar that sits on this object is forced into mouse-look mode.\\nAfter calling this function with Enable set to TRUE, any agent sitting down on the prim will be forced into mouse-look.\\nJust like llSitTarget, this changes a permanent property of the prim (not the object) and needs to be reset by calling this function with Enable set to FALSE in order to disable it."
	},
	"llFrand": {
		"arguments": [
			{
				"Magnitude": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 8,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns a pseudo random number in the range [0, Magnitude] or [Magnitude, 0].\\nReturns a pseudo-random number between [0, Magnitude]."
	},
	"llGenerateKey": {
		"arguments": [],
		"energy": 10,
		"func-id": 383,
		"return": "key",
		"sleep": 0,
		"tooltip": "Generates a key (SHA-1 hash) using UUID generation to create a unique key.\\nAs the UUID produced is versioned, it should never return a value of NULL_KEY.\\nThe specific UUID version is an implementation detail that has changed in the past and may change again in the future. Do not depend upon the UUID that is returned to be version 5 SHA-1 hash."
	},
	"llGetAccel": {
		"arguments": [],
		"energy": 10,
		"func-id": 78,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the acceleration of the object relative to the region's axes.\\nGets the acceleration of the object."
	},
	"llGetAgentInfo": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 206,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer bit-field containing the agent information about id.\\n\n                    Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING, AGENT_IN_AIR and/or AGENT_FLOATING_VIA_SCRIPTED_ATTACHMENT.\\nReturns information about the given agent ID as a bit-field of agent info constants."
	},
	"llGetAgentLanguage": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 336,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the language code of the preferred interface language of the avatar.\\nReturns a string that is the language code of the preferred interface language of the resident."
	},
	"llGetAgentList": {
		"arguments": [
			{
				"Scope": {
					"tooltip": "The scope (region, parcel, parcel same owner) to return agents for.",
					"type": "integer"
				}
			},
			{
				"Options": {
					"tooltip": "List of options to apply. Current unused.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 412,
		"return": "list",
		"sleep": 0,
		"tooltip": "Requests a list of agents currently in the region, limited by the scope parameter.\\nReturns a list [key UUID-0, key UUID-1, ..., key UUID-n] or [string error_msg] - returns avatar keys for all agents in the region limited to the area(s) specified by scope"
	},
	"llGetAgentSize": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 218,
		"return": "vector",
		"sleep": 0,
		"tooltip": "If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR.\\nIf the agent is in the same region as the object, returns the size of the avatar."
	},
	"llGetAlpha": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 50,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the alpha value of Face.\\nReturns the 'alpha' of the given face. If face is ALL_SIDES the value returned is the mean average of all faces."
	},
	"llGetAndResetTime": {
		"arguments": [],
		"energy": 10,
		"func-id": 84,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the script time in seconds and then resets the script timer to zero.\\nGets the time in seconds since starting and resets the time to zero."
	},
	"llGetAnimation": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 162,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of the currently playing locomotion animation for the avatar id.\\nReturns the currently playing animation for the specified avatar ID."
	},
	"llGetAnimationList": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 266,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of keys of playing animations for an avatar.\\nReturns a list of keys of all playing animations for the specified avatar ID."
	},
	"llGetAnimationOverride": {
		"arguments": [
			{
				"AnimationState": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 500,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is the name of the animation that is used for the specified animation state\\nTo use this function the script must obtain either the PERMISSION_OVERRIDE_ANIMATIONS or PERMISSION_TRIGGER_ANIMATION permission (automatically granted to attached objects)."
	},
	"llGetAttached": {
		"arguments": [],
		"energy": 10,
		"func-id": 224,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the object's attachment point, or 0 if not attached."
	},
	"llGetAttachedList": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Avatar to get attachments",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 523,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of keys of all visible (not HUD) attachments on the avatar identified by the ID argument"
	},
	"llGetAttachedListFiltered": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "An agent in the region.",
					"type": "key"
				}
			},
			{
				"Options": {
					"tooltip": "A list of option for inventory transfer.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 518,
		"return": "list",
		"sleep": 0,
		"tooltip": "Retrieves a list of attachments on an avatar."
	},
	"llGetBoundingBox": {
		"arguments": [
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 277,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns the bounding box around the object (including any linked prims) relative to its root prim, as a list in the format [ (vector) min_corner, (vector) max_corner ]."
	},
	"llGetCameraAspect": {
		"arguments": [],
		"energy": 10,
		"func-id": 545,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the current camera aspect ratio (width / height) of the agent who has granted the scripted object PERMISSION_TRACK_CAMERA permissions. If no permissions have been granted: it returns zero."
	},
	"llGetCameraFOV": {
		"arguments": [],
		"energy": 10,
		"func-id": 546,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the current camera field of view of the agent who has granted the scripted object PERMISSION_TRACK_CAMERA permissions. If no permissions have been granted: it returns zero."
	},
	"llGetCameraPos": {
		"arguments": [],
		"energy": 10,
		"func-id": 303,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the current camera position for the agent the task has permissions for.\\nReturns the position of the camera, of the user that granted the script PERMISSION_TRACK_CAMERA. If no user has granted the permission, it returns ZERO_VECTOR."
	},
	"llGetCameraRot": {
		"arguments": [],
		"energy": 10,
		"func-id": 304,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the current camera orientation for the agent the task has permissions for. If no user has granted the PERMISSION_TRACK_CAMERA permission, returns ZERO_ROTATION."
	},
	"llGetCenterOfMass": {
		"arguments": [],
		"energy": 10,
		"func-id": 183,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the prim's centre of mass (unless called from the root prim, where it returns the object's centre of mass)."
	},
	"llGetClosestNavPoint": {
		"arguments": [
			{
				"Point": {
					"tooltip": "A point in region-local space.",
					"type": "vector"
				}
			},
			{
				"Options": {
					"tooltip": "No options at this time.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 408,
		"return": "list",
		"sleep": 0,
		"tooltip": "Get the closest navigable point to the point provided.\\nThe function accepts a point in region-local space (like all the other path-finding methods) and returns either an empty list or a list containing a single vector which is the closest point on the navigation-mesh to the point provided."
	},
	"llGetColor": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 52,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the color on Face.\\nReturns the color of Face as a vector of red, green, and blue values between 0 and 1. If face is ALL_SIDES the color returned is the mean average of each channel."
	},
	"llGetCreator": {
		"arguments": [],
		"energy": 10,
		"func-id": 272,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns a key for the creator of the prim.\\nReturns the key of the object's original creator. Similar to llGetOwner."
	},
	"llGetDate": {
		"arguments": [],
		"energy": 10,
		"func-id": 204,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the current date in the UTC time zone in the format YYYY-MM-DD.\\nReturns the current UTC date as YYYY-MM-DD."
	},
	"llGetDayLength": {
		"arguments": [],
		"energy": 10,
		"func-id": 703,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of seconds in a day on this parcel."
	},
	"llGetDayOffset": {
		"arguments": [],
		"energy": 10,
		"func-id": 705,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of seconds in a day is offset from midnight in this parcel."
	},
	"llGetDisplayName": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "Avatar UUID that is in the same region, or is otherwise known to the region.",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 360,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the display name of an avatar, if the avatar is connected to the current region, or if the name has been cached.  Otherwise, returns an empty string. Use llRequestDisplayName if the avatar may be absent from the region."
	},
	"llGetEnergy": {
		"arguments": [],
		"energy": 10,
		"func-id": 149,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns how much energy is in the object as a percentage of maximum."
	},
	"llGetEnv": {
		"arguments": [
			{
				"DataRequest": {
					"tooltip": "The type of data to request. Any other string will cause an empty string to be returned.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 362,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string with the requested data about the region."
	},
	"llGetEnvironment": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Location within the region.",
					"type": "vector"
				}
			},
			{
				"EnvParams": {
					"tooltip": "List of environment settings requested for the specified parcel location.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 711,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a string with the requested data about the region."
	},
	"llGetExperienceDetails": {
		"arguments": [
			{
				"ExperienceID": {
					"tooltip": "May be NULL_KEY to retrieve the details for the script's Experience",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 409,
		"return": "list",
		"sleep": 0,
		"tooltip": "\n                   Returns a list with the following Experience properties: [Experience Name, Owner ID, Group ID, Experience ID, State, State Message]. State is an integer corresponding to one of the constants XP_ERROR_... and State Message is the string returned by llGetExperienceErrorMessage for that integer.\n                "
	},
	"llGetExperienceErrorMessage": {
		"arguments": [
			{
				"Error": {
					"tooltip": "An Experience error code to translate.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 603,
		"return": "string",
		"sleep": 0,
		"tooltip": "\n                   Returns a string describing the error code passed or the string corresponding with XP_ERROR_UNKNOWN_ERROR if the value is not a valid Experience error code.\n                "
	},
	"llGetExperienceList": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 410,
		"private": true,
		"return": "list",
		"sleep": 0,
		"tooltip": ""
	},
	"llGetForce": {
		"arguments": [],
		"energy": 10,
		"func-id": 65,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the force (if the script is physical).\\nReturns the current force if the script is physical."
	},
	"llGetFreeMemory": {
		"arguments": [],
		"energy": 10,
		"func-id": 225,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of free bytes of memory the script can use.\\nReturns the available free space for the current script. This is inaccurate with LSO."
	},
	"llGetFreeURLs": {
		"arguments": [],
		"energy": 10,
		"func-id": 344,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of available URLs for the current script.\\nReturns an integer that is the number of available URLs."
	},
	"llGetGMTclock": {
		"arguments": [],
		"energy": 10,
		"func-id": 282,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the time in seconds since midnight GMT.\\nGets the time in seconds since midnight in GMT/UTC."
	},
	"llGetGeometricCenter": {
		"arguments": [],
		"energy": 10,
		"func-id": 278,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the vector that is the geometric center of the object relative to the root prim."
	},
	"llGetHTTPHeader": {
		"arguments": [
			{
				"HTTPRequestID": {
					"tooltip": "A valid HTTP request key",
					"type": "key"
				}
			},
			{
				"Header": {
					"tooltip": "Header value name",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 349,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the value for header for request_id.\\nReturns a string that is the value of the Header for HTTPRequestID."
	},
	"llGetHealth": {
		"arguments": [
			{
				"ID": {
					"tooltip": "The ID of an agent or object in the region.",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 552,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the current health of an avatar or object in the region."
	},
	"llGetInventoryAcquireTime": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "Name of item in prim inventory.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 529,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the time at which the item was placed into this prim's inventory as a timestamp."
	},
	"llGetInventoryCreator": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 291,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns a key for the creator of the inventory item.\\nThis function returns the UUID of the creator of item. If item is not found in inventory, the object says \"No item named 'name'\"."
	},
	"llGetInventoryDesc": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 543,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the item description of the item in inventory. If item is not found in inventory, the object says \"No item named 'name'\" to the debug channel and returns an empty string."
	},
	"llGetInventoryKey": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 175,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key that is the UUID of the inventory named.\\nReturns the key of the inventory named."
	},
	"llGetInventoryName": {
		"arguments": [
			{
				"InventoryType": {
					"tooltip": "Inventory item type",
					"type": "integer"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "Index number of inventory item.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 147,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of the inventory item of a given type, specified by index number.\\nUse the inventory constants INVENTORY_* to specify the type."
	},
	"llGetInventoryNumber": {
		"arguments": [
			{
				"InventoryType": {
					"tooltip": "Inventory item type",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 146,
		"index_semantics": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the quantity of items of a given type (INVENTORY_* flag) in the prim's inventory.\\nUse the inventory constants INVENTORY_* to specify the type."
	},
	"llGetInventoryPermMask": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "Inventory item name.",
					"type": "string"
				}
			},
			{
				"BitMask": {
					"tooltip": "MASK_BASE, MASK_OWNER, MASK_GROUP, MASK_EVERYONE or MASK_NEXT",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 289,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the requested permission mask for the inventory item.\\nReturns the requested permission mask for the inventory item defined by InventoryItem. If item is not in the object's inventory, llGetInventoryPermMask returns FALSE and causes the object to say \"No item named '<item>'\", where \"<item>\" is item."
	},
	"llGetInventoryType": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 301,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the type of the named inventory item.\\nLike all inventory functions, llGetInventoryType is case-sensitive."
	},
	"llGetKey": {
		"arguments": [],
		"energy": 10,
		"func-id": 121,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of the prim the script is attached to.\\nGet the key for the object which has this script."
	},
	"llGetLandOwnerAt": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 216,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of the land owner, returns NULL_KEY if public.\\nReturns the key of the land owner at Position, or NULL_KEY if public."
	},
	"llGetLinkKey": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 144,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of the linked prim LinkNumber.\\nReturns the key of LinkNumber in the link set."
	},
	"llGetLinkMedia": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Face": {
					"tooltip": "The prim's side number",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "A list of PRIM_* property constants to return values of.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 372,
		"return": "list",
		"sleep": 0,
		"tooltip": "Get the media parameters for a particular face on linked prim, given the desired list of parameter names. Returns a list of values in the order requested.\tReturns an empty list if no media exists on the face."
	},
	"llGetLinkName": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 145,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of LinkNumber in a link set.\\nReturns the name of LinkNumber the link set."
	},
	"llGetLinkNumber": {
		"arguments": [],
		"energy": 10,
		"func-id": 139,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc.).\\nReturns the link number of the prim containing the script. 0 means no link, 1 the root, 2 for first child, etc."
	},
	"llGetLinkNumberOfSides": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 357,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of sides of the specified linked prim.\\nReturns an integer that is the number of faces (or sides) of the prim link."
	},
	"llGetLinkPrimitiveParams": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "PRIM_* flags.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 354,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns the list of primitive attributes requested in the Parameters list for LinkNumber.\\nPRIM_* flags can be broken into three categories, face flags, prim flags, and object flags.\\n* Supplying a prim or object flag will return that flags attributes.\\n* Face flags require the user to also supply a face index parameter."
	},
	"llGetLinkSitFlags": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 551,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the sit flags set on the specified prim in a linkset."
	},
	"llGetListEntryType": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 194,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the type of the index entry in the list (TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list).\\nReturns the type of the variable at Index in ListVariable."
	},
	"llGetListLength": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 185,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of elements in the list.\\nReturns the number of elements in ListVariable."
	},
	"llGetLocalPos": {
		"arguments": [],
		"energy": 10,
		"func-id": 60,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the position relative to the root.\\nReturns the local position of a child object relative to the root."
	},
	"llGetLocalRot": {
		"arguments": [],
		"energy": 10,
		"func-id": 63,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation local to the root.\\nReturns the local rotation of a child object relative to the root."
	},
	"llGetMass": {
		"arguments": [],
		"energy": 10,
		"func-id": 109,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the mass of object that the script is attached to.\\nReturns the scripted object's mass. When called from a script in a link-set, the parent will return the sum of the link-set weights, while a child will return just its own mass. When called from a script inside an attachment, this function will return the mass of the avatar it's attached to, not its own."
	},
	"llGetMassMKS": {
		"arguments": [],
		"energy": 10,
		"func-id": 382,
		"return": "float",
		"sleep": 0,
		"tooltip": "Acts as llGetMass(), except that the units of the value returned are Kg."
	},
	"llGetMaxScaleFactor": {
		"arguments": [],
		"energy": 10,
		"func-id": 591,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the largest multiplicative uniform scale factor that can be successfully applied (via llScaleByFactor()) to the object without violating prim size or linkability rules."
	},
	"llGetMemoryLimit": {
		"arguments": [],
		"energy": 10,
		"func-id": 370,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Get the maximum memory a script can use, in bytes."
	},
	"llGetMinScaleFactor": {
		"arguments": [],
		"energy": 10,
		"func-id": 590,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the smallest multiplicative uniform scale factor that can be successfully applied (via llScaleByFactor()) to the object without violating prim size or linkability rules."
	},
	"llGetMoonDirection": {
		"arguments": [],
		"energy": 10,
		"func-id": 701,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a normalized vector of the direction of the moon in the parcel.\\nReturns the moon's direction on the simulator in the parcel."
	},
	"llGetMoonRotation": {
		"arguments": [],
		"energy": 10,
		"func-id": 709,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation applied to the moon in the parcel."
	},
	"llGetNextEmail": {
		"arguments": [
			{
				"Address": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Subject": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 120,
		"return": "void",
		"sleep": 0,
		"tooltip": "Fetch the next queued email with that matches the given address and/or subject, via the email event.\\nIf the parameters are blank, they are not used for filtering."
	},
	"llGetNotecardLine": {
		"arguments": [
			{
				"NotecardName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"LineNumber": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 217,
		"return": "key",
		"sleep": 0.1,
		"tooltip": "Returns LineNumber from NotecardName via the dataserver event. The line index starts at zero in LSL, one in Lua.\\nIf the requested line is passed the end of the note-card the dataserver event will return the constant EOF string.\\nThe key returned by this function is a unique identifier which will be supplied to the dataserver event in the requested parameter."
	},
	"llGetNotecardLineSync": {
		"arguments": [
			{
				"NotecardName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"LineNumber": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 549,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns LineNumber from NotecardName. The line index starts at zero in LSL, one in Lua.\\nIf the requested line is past the end of the note-card the return value will be set to the constant EOF string.\\nIf the note-card is not cached on the simulator the return value is the NAK string."
	},
	"llGetNumberOfNotecardLines": {
		"arguments": [
			{
				"NotecardName": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 276,
		"return": "key",
		"sleep": 0.1,
		"tooltip": "Returns the number of lines contained within a notecard via the dataserver event.\\nThe key returned by this function is a query ID for identifying the dataserver reply."
	},
	"llGetNumberOfPrims": {
		"arguments": [],
		"energy": 10,
		"func-id": 275,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of prims in a link set the script is attached to.\\nReturns the number of prims in (and avatars seated on) the object the script is in."
	},
	"llGetNumberOfSides": {
		"arguments": [],
		"energy": 10,
		"func-id": 168,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of faces (or sides) of the prim.\\nReturns the number of sides of the prim which has the script."
	},
	"llGetObjectAnimationNames": {
		"arguments": [],
		"energy": 10,
		"func-id": 506,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of names of playing animations for an object.\\nReturns a list of names of all playing animations for the current object."
	},
	"llGetObjectDesc": {
		"arguments": [],
		"energy": 10,
		"func-id": 270,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the description of the prim the script is attached to.\\nReturns the description of the scripted object/prim. You can set the description using llSetObjectDesc."
	},
	"llGetObjectDetails": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Prim or avatar UUID that is in the same region.",
					"type": "key"
				}
			},
			{
				"Parameters": {
					"tooltip": "List of OBJECT_* flags.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 332,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of object details specified in the Parameters list for the object or avatar in the region with key ID.\\nParameters are specified by the OBJECT_* constants."
	},
	"llGetObjectLinkKey": {
		"arguments": [
			{
				"id": {
					"tooltip": "UUID of prim",
					"type": "key"
				}
			},
			{
				"link_no": {
					"tooltip": "Link number to retrieve",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 532,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of the linked prim link_no in a linkset.\\nReturns the key of link_no in the link set specified by id."
	},
	"llGetObjectMass": {
		"arguments": [
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 295,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the mass of the avatar or object in the region.\\nGets the mass of the object or avatar corresponding to ID."
	},
	"llGetObjectName": {
		"arguments": [],
		"energy": 10,
		"func-id": 202,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of the prim which the script is attached to.\\nReturns the name of the prim (not object) which contains the script."
	},
	"llGetObjectPermMask": {
		"arguments": [
			{
				"Category": {
					"tooltip": "Category is one of MASK_BASE, MASK_OWNER, MASK_GROUP, MASK_EVERYONE, or MASK_NEXT",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 287,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the permission mask of the requested category for the object."
	},
	"llGetObjectPrimCount": {
		"arguments": [
			{
				"ObjectID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 323,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the total number of prims for an object in the region.\\nReturns the prim count for any object id in the same region."
	},
	"llGetOmega": {
		"arguments": [],
		"energy": 10,
		"func-id": 79,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the rotation velocity in radians per second.\\nReturns a vector that is the rotation velocity of the object in radians per second."
	},
	"llGetOwner": {
		"arguments": [],
		"energy": 10,
		"func-id": 117,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the object owner's UUID.\\nReturns the key for the owner of the object."
	},
	"llGetOwnerKey": {
		"arguments": [
			{
				"ObjectID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 182,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the owner of ObjectID.\\nReturns the key for the owner of object ObjectID."
	},
	"llGetParcelDetails": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Location within the region.",
					"type": "vector"
				}
			},
			{
				"ParcelDetails": {
					"tooltip": "List of details requested for the specified parcel location.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 327,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of parcel details specified in the ParcelDetails list for the parcel at Position.\\nParameters is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA, _ID, _SEE_AVATARS.\\nReturns a list that is the parcel details specified in ParcelDetails (in the same order) for the parcel at Position."
	},
	"llGetParcelFlags": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 317,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point Position.\\nReturns a bit-field specifying the parcel flags (PARCEL_FLAG_*) for the parcel at Position."
	},
	"llGetParcelMaxPrims": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Region coordinates (z is ignored) of parcel.",
					"type": "vector"
				}
			},
			{
				"SimWide": {
					"tooltip": "Boolean. If FALSE then the return is the maximum prims supported by the parcel. If TRUE then it is the combined number of prims on all parcels in the region owned by the specified parcel's owner.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 326,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the maximum number of prims allowed on the parcel at Position for a given scope.\\nThe scope may be set to an individual parcel or the combined resources of all parcels with the same ownership in the region."
	},
	"llGetParcelMusicURL": {
		"arguments": [],
		"energy": 10,
		"func-id": 396,
		"return": "string",
		"sleep": 0,
		"tooltip": "Gets the streaming audio URL for the parcel object is on.\\nThe object owner, avatar or group, must also be the land owner."
	},
	"llGetParcelPrimCount": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Region coordinates of parcel to query.",
					"type": "vector"
				}
			},
			{
				"Category": {
					"tooltip": "A PARCEL_COUNT_* flag.",
					"type": "integer"
				}
			},
			{
				"SimWide": {
					"tooltip": "Boolean. If FALSE then the return is the maximum prims supported by the parcel. If TRUE then it is the combined number of prims on all parcels in the region owned by the specified parcel's owner.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 325,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of prims on the parcel at Position of the given category.\\nCategories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.\\nReturns the number of prims used on the parcel at Position which are in Category.\\nIf SimWide is TRUE, it returns the total number of objects for all parcels with matching ownership in the category specified.\\nIf SimWide is FALSE, it returns the number of objects on this specific parcel in the category specified"
	},
	"llGetParcelPrimOwners": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 324,
		"return": "list",
		"sleep": 2,
		"tooltip": "Returns a list of up to 100 residents who own objects on the parcel at Position, with per-owner land impact totals.\\nRequires owner-like permissions for the parcel, and for the script owner to be present in the region.\\nThe list is formatted as [ key agentKey1, integer agentLI1, key agentKey2, integer agentLI2, ... ], sorted by agent key.\\nThe integers are the combined land impacts of the objects owned by the corresponding agents."
	},
	"llGetPermissions": {
		"arguments": [],
		"energy": 10,
		"func-id": 138,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer bitmask of the permissions that have been granted to the script.  Individual permissions can be determined using a bit-wise \"and\" operation against the PERMISSION_* constants"
	},
	"llGetPermissionsKey": {
		"arguments": [],
		"energy": 10,
		"func-id": 137,
		"return": "key",
		"sleep": 0,
		"tooltip": "Returns the key of the avatar that last granted or declined permissions to the script.\\nReturns NULL_KEY if permissions were never granted or declined."
	},
	"llGetPhysicsMaterial": {
		"arguments": [],
		"energy": 10,
		"func-id": 381,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of the form [float gravity_multiplier, float restitution, float friction, float density]."
	},
	"llGetPos": {
		"arguments": [],
		"energy": 10,
		"func-id": 59,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the position of the task in region coordinates.\\nReturns the vector position of the task in region coordinates."
	},
	"llGetPrimMediaParams": {
		"arguments": [
			{
				"Face": {
					"tooltip": "face number",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "One or more PRIM_MEDIA_* flags",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 351,
		"return": "list",
		"sleep": 1,
		"tooltip": "Returns the media parameters for a particular face on an object, given the desired list of parameter names, in the order requested. Returns an empty list if no media exists on the face."
	},
	"llGetPrimitiveParams": {
		"arguments": [
			{
				"Parameters": {
					"tooltip": "PRIM_* flags and face parameters",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 279,
		"return": "list",
		"sleep": 0.2,
		"tooltip": "Returns the primitive parameters specified in the parameters list.\\nReturns primitive parameters specified in the Parameters list."
	},
	"llGetRegionAgentCount": {
		"arguments": [],
		"energy": 10,
		"func-id": 334,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of avatars in the region.\\nReturns an integer that is the number of avatars in the region."
	},
	"llGetRegionCorner": {
		"arguments": [],
		"energy": 10,
		"func-id": 199,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a vector, in meters, that is the global location of the south-west corner of the region which the object is in.\\nReturns the Region-Corner of the simulator containing the task. The region-corner is a vector (values in meters) representing distance from the first region."
	},
	"llGetRegionDayLength": {
		"arguments": [],
		"energy": 10,
		"func-id": 704,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of seconds in a day in this region."
	},
	"llGetRegionDayOffset": {
		"arguments": [],
		"energy": 10,
		"func-id": 706,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of seconds in a day is offset from midnight in this parcel."
	},
	"llGetRegionFPS": {
		"arguments": [],
		"energy": 10,
		"func-id": 228,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the mean region frames per second."
	},
	"llGetRegionFlags": {
		"arguments": [],
		"energy": 10,
		"func-id": 318,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the region flags (REGION_FLAG_*) for the region the object is in.\\nReturns a bit-field specifying the region flags (REGION_FLAG_*) for the region the object is in."
	},
	"llGetRegionMoonDirection": {
		"arguments": [],
		"energy": 10,
		"func-id": 702,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a normalized vector of the direction of the moon in the region.\\nReturns the moon's direction on the simulator."
	},
	"llGetRegionMoonRotation": {
		"arguments": [],
		"energy": 10,
		"func-id": 710,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation applied to the moon in the region."
	},
	"llGetRegionName": {
		"arguments": [],
		"energy": 10,
		"func-id": 226,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the current region name."
	},
	"llGetRegionSunDirection": {
		"arguments": [],
		"energy": 10,
		"func-id": 700,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a normalized vector of the direction of the sun in the region.\\nReturns the sun's direction on the simulator."
	},
	"llGetRegionSunRotation": {
		"arguments": [],
		"energy": 10,
		"func-id": 708,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation applied to the sun in the region."
	},
	"llGetRegionTimeDilation": {
		"arguments": [],
		"energy": 10,
		"func-id": 227,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation).\\nReturns the current time dilation as a float between 0.0 and 1.0."
	},
	"llGetRegionTimeOfDay": {
		"arguments": [],
		"energy": 10,
		"func-id": 712,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the time in seconds since environmental midnight for the entire region."
	},
	"llGetRenderMaterial": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 760,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is the render material on face (the inventory name if it is a material in the prim's inventory, otherwise the key).\\nReturns the render material of a face, if it is found in object inventory, its key otherwise."
	},
	"llGetRootPosition": {
		"arguments": [],
		"energy": 10,
		"func-id": 268,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the position (in region coordinates) of the root prim of the object which the script is attached to.\\nThis is used to allow a child prim to determine where the root is."
	},
	"llGetRootRotation": {
		"arguments": [],
		"energy": 10,
		"func-id": 269,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation (relative to the region) of the root prim of the object which the script is attached to.\\nGets the global rotation of the root object of the object script is attached to."
	},
	"llGetRot": {
		"arguments": [],
		"energy": 10,
		"func-id": 62,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation relative to the region's axes.\\nReturns the rotation."
	},
	"llGetSPMaxMemory": {
		"arguments": [],
		"energy": 10,
		"func-id": 365,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the maximum used memory for the current script. Only valid after using PROFILE_SCRIPT_MEMORY. Non-mono scripts always use 16k.\\nReturns the integer of the most bytes used while llScriptProfiler was last active."
	},
	"llGetScale": {
		"arguments": [],
		"energy": 10,
		"func-id": 48,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the scale of the prim.\\nReturns a vector that is the scale (dimensions) of the prim."
	},
	"llGetScriptName": {
		"arguments": [],
		"energy": 10,
		"func-id": 167,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of the script that this function is used in.\\nReturns the name of this script."
	},
	"llGetScriptState": {
		"arguments": [
			{
				"ScriptName": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 250,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if the script named is running.\\nReturns TRUE if ScriptName is running."
	},
	"llGetSimStats": {
		"arguments": [
			{
				"StatType": {
					"tooltip": "Statistic type.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 415,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns a float that is the requested statistic."
	},
	"llGetSimulatorHostname": {
		"arguments": [],
		"energy": 10,
		"func-id": 283,
		"return": "string",
		"sleep": 10,
		"tooltip": "Returns the host-name of the machine which the script is running on.\\nFor example, \"sim225.agni.lindenlab.com\"."
	},
	"llGetStartParameter": {
		"arguments": [],
		"energy": 10,
		"func-id": 134,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer that is the script rez parameter.\\nIf the object was rezzed by an agent, this function returns 0."
	},
	"llGetStartString": {
		"arguments": null,
		"energy": 10,
		"func-id": 556,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns an string that is the value passed to llRezObjectWithParams with REZ_PARAM_STRING.\\nIf the object was rezzed by an agent, this function returns an empty string."
	},
	"llGetStaticPath": {
		"arguments": [
			{
				"Start": {
					"tooltip": "Starting position.",
					"type": "vector"
				}
			},
			{
				"End": {
					"tooltip": "Ending position.",
					"type": "vector"
				}
			},
			{
				"Radius": {
					"tooltip": "Radius of the character that the path is for, between 0.125m and 5.0m.",
					"type": "float"
				}
			},
			{
				"Parameters": {
					"tooltip": "Currently only accepts the parameter CHARACTER_TYPE; the options are identical to those used for llCreateCharacter. The default value is CHARACTER_TYPE_NONE.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 413,
		"return": "list",
		"sleep": 0,
		"tooltip": ""
	},
	"llGetStatus": {
		"arguments": [
			{
				"StatusFlag": {
					"tooltip": "A STATUS_* flag",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 46,
		"bool_semantics": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns boolean value of the specified status (e.g. STATUS_PHANTOM) of the object the script is attached to."
	},
	"llGetSubString": {
		"arguments": [
			{
				"String": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 94,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a sub-string from String, in a range specified by the Start and End indicies (inclusive).\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would capture the entire string.\\nIf Start is greater than End, the sub string is the exclusion of the entries."
	},
	"llGetSunDirection": {
		"arguments": [],
		"energy": 10,
		"func-id": 177,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns a normalized vector of the direction of the sun in the parcel.\\nReturns the sun's direction on the simulator in the parcel."
	},
	"llGetSunRotation": {
		"arguments": [],
		"energy": 10,
		"func-id": 707,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation applied to the sun in the parcel."
	},
	"llGetTexture": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 57,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is the texture on face (the inventory name if it is a texture in the prim's inventory, otherwise the key).\\nReturns the texture of a face, if it is found in object inventory, its key otherwise."
	},
	"llGetTextureOffset": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 178,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the texture offset of face in the x and y components of a vector."
	},
	"llGetTextureRot": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 180,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the texture rotation of side."
	},
	"llGetTextureScale": {
		"arguments": [
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 179,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the texture scale of side in the x and y components of a vector.\\nReturns the texture scale of a side in the x and y components of a vector."
	},
	"llGetTime": {
		"arguments": [],
		"energy": 10,
		"func-id": 82,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime."
	},
	"llGetTimeOfDay": {
		"arguments": [],
		"energy": 10,
		"func-id": 80,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the time in seconds since environmental midnight on the parcel."
	},
	"llGetTimestamp": {
		"arguments": [],
		"energy": 10,
		"func-id": 273,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a time-stamp (UTC time zone) in the format: YYYY-MM-DDThh:mm:ss.ff..fZ."
	},
	"llGetTorque": {
		"arguments": [],
		"energy": 10,
		"func-id": 75,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the torque (if the script is physical).\\nReturns a vector that is the torque (if the script is physical)."
	},
	"llGetUnixTime": {
		"arguments": [],
		"energy": 10,
		"func-id": 316,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock."
	},
	"llGetUsedMemory": {
		"arguments": [],
		"energy": 10,
		"func-id": 366,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the current used memory for the current script. Non-mono scripts always use 16K.\\nReturns the integer of the number of bytes of memory currently in use by the script. Non-mono scripts always use 16K."
	},
	"llGetUsername": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 358,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the username of an avatar, if the avatar is connected to the current region, or if the name has been cached.  Otherwise, returns an empty string. Use llRequestUsername if the avatar may be absent from the region."
	},
	"llGetVel": {
		"arguments": [],
		"energy": 10,
		"func-id": 77,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the velocity of the object.\\nReturns a vector that is the velocity of the object."
	},
	"llGetVisualParams": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Avatar UUID in the same region.",
					"type": "key"
				}
			},
			{
				"Parameters": {
					"tooltip": "List of visual parameter IDs.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 530,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of the current value for each requested visual parameter."
	},
	"llGetWallclock": {
		"arguments": [],
		"energy": 10,
		"func-id": 81,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the time in seconds since midnight California Pacific time (PST/PDT).\\nReturns the time in seconds since simulator's time-zone midnight (Pacific Time)."
	},
	"llGiveAgentInventory": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "An agent in the region.",
					"type": "key"
				}
			},
			{
				"FolderName": {
					"tooltip": "Folder name to give to the agent.",
					"type": "string"
				}
			},
			{
				"InventoryItems": {
					"tooltip": "Inventory items to give to the agent.",
					"type": "list"
				}
			},
			{
				"Options": {
					"tooltip": "A list of option for inventory transfer.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 517,
		"return": "integer",
		"sleep": 3,
		"tooltip": "Give InventoryItems to the specified agent as a new folder of items, as permitted by the permissions system. The target must be an agent."
	},
	"llGiveInventory": {
		"arguments": [
			{
				"TargetID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 150,
		"return": "void",
		"sleep": 0,
		"tooltip": "Give InventoryItem to destination represented by TargetID, as permitted by the permissions system.\\nTargetID may be any agent or an object in the same region."
	},
	"llGiveInventoryList": {
		"arguments": [
			{
				"TargetID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"FolderName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"InventoryItems": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 231,
		"return": "void",
		"sleep": 3,
		"tooltip": "Give InventoryItems to destination (represented by TargetID) as a new folder of items, as permitted by the permissions system.\\nTargetID may be any agent or an object in the same region. If TargetID is an object, the items are passed directly to the object inventory (no folder is created)."
	},
	"llGiveMoney": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Amount": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 99,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Transfers Amount of L$ from script owner to AvatarID.\\nThis call will silently fail if PERMISSION_DEBIT has not been granted."
	},
	"llGodLikeRezObject": {
		"arguments": [
			{
				"InventoryItemID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 135,
		"god-mode": true,
		"return": "void",
		"sleep": 0,
		"tooltip": "Rez directly off of a UUID if owner has god-bit set."
	},
	"llGround": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 42,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the ground height at the object position + offset.\\nReturns the ground height at the object's position + Offset."
	},
	"llGroundContour": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 223,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the ground contour direction below the object position + Offset.\\nReturns the ground contour at the object's position + Offset."
	},
	"llGroundNormal": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 222,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the ground normal below the object position + offset.\\nReturns the ground contour at the object's position + Offset."
	},
	"llGroundRepel": {
		"arguments": [
			{
				"Height": {
					"tooltip": "Distance above the ground.",
					"type": "float"
				}
			},
			{
				"Water": {
					"tooltip": "Boolean, if TRUE then hover above water too.",
					"type": "integer"
				}
			},
			{
				"Tau": {
					"tooltip": "Seconds to critically damp in.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 230,
		"return": "void",
		"sleep": 0,
		"tooltip": "Critically damps to height if within height * 0.5 of level (either above ground level or above the higher of land and water if water == TRUE).\\nCritically damps to fHeight if within fHeight * 0.5 of ground or water level.\\n\n                    The height is above ground level if iWater is FALSE or above the higher of land and water if iWater is TRUE.\\n\n                    Do not use with vehicles. Only works in physics-enabled objects."
	},
	"llGroundSlope": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 221,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the ground slope below the object position + Offset.\\nReturns the ground slope at the object position + Offset."
	},
	"llHMAC": {
		"arguments": [
			{
				"Key": {
					"tooltip": "The PEM-formatted key for the hash digest.",
					"type": "string"
				}
			},
			{
				"Message": {
					"tooltip": "The message to be hashed.",
					"type": "string"
				}
			},
			{
				"Algorithm": {
					"tooltip": "The digest algorithm: md5, sha1, sha224, sha256, sha384, sha512.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 538,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the base64-encoded hashed message authentication code (HMAC), of Message using PEM-formatted Key and digest Algorithm (md5, sha1, sha224, sha256, sha384, sha512)."
	},
	"llHTTPRequest": {
		"arguments": [
			{
				"URL": {
					"tooltip": "A valid HTTP/HTTPS URL.",
					"type": "string"
				}
			},
			{
				"Parameters": {
					"tooltip": "Configuration parameters, specified as HTTP_* flag-value pairs.",
					"type": "list"
				}
			},
			{
				"Body": {
					"tooltip": "Contents of the request.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 320,
		"return": "key",
		"sleep": 0,
		"tooltip": "Sends an HTTP request to the specified URL with the Body of the request and Parameters.\\nReturns a key that is a handle identifying the HTTP request made."
	},
	"llHTTPResponse": {
		"arguments": [
			{
				"HTTPRequestID": {
					"tooltip": "A valid HTTP request key.",
					"type": "key"
				}
			},
			{
				"Status": {
					"tooltip": "HTTP Status (200, 400, 404, etc.).",
					"type": "integer"
				}
			},
			{
				"Body": {
					"tooltip": "Contents of the response.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 348,
		"return": "void",
		"sleep": 0,
		"tooltip": "Responds to an incoming HTTP request which was triggerd by an http_request event within the script. HTTPRequestID specifies the request to respond to (this ID is supplied in the http_request event handler).  Status and Body specify the status code and message to respond with."
	},
	"llHash": {
		"arguments": [
			{
				"value": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 528,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Calculates the 32bit hash value for the provided string."
	},
	"llInsertString": {
		"arguments": [
			{
				"TargetVariable": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Position": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"SourceVariable": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 96,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Inserts SourceVariable into TargetVariable at Position, and returns the result.\\nInserts SourceVariable into TargetVariable at Position and returns the result. Note this does not alter TargetVariable."
	},
	"llInstantMessage": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 118,
		"return": "void",
		"sleep": 2,
		"tooltip": "IMs Text to the user identified.\\nSend Text to the user as an instant message."
	},
	"llIntegerToBase64": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 280,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is a Base64 big endian encode of Value.\\nEncodes the Value as an 8-character Base64 string."
	},
	"llIsFriend": {
		"arguments": [
			{
				"agent_id": {
					"tooltip": "Agent ID of another agent in the region.",
					"type": "key"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 542,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if avatar ID is a friend of the script owner."
	},
	"llIsLinkGLTFMaterial": {
		"arguments": [
			{
				"link": {
					"tooltip": "Link number to check.",
					"type": "integer"
				}
			},
			{
				"face": {
					"tooltip": "Side to check for a PBR material. Use ALL_SIDES to check for all.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 559,
		"return": "integer",
		"bool_semantics": true,
		"sleep": 0,
		"tooltip": "Checks the face for a PBR render material."
	},
	"llJson2List": {
		"arguments": [
			{
				"JSON": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 513,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Converts the top level of the JSON string to a list."
	},
	"llJsonGetValue": {
		"arguments": [
			{
				"JSON": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Specifiers": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 511,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Gets the value indicated by Specifiers from the JSON string."
	},
	"llJsonSetValue": {
		"arguments": [
			{
				"JSON": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Specifiers": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 510,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a new JSON string that is the JSON given with the Value indicated by Specifiers set to Value."
	},
	"llJsonValueType": {
		"arguments": [
			{
				"JSON": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Specifiers": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 512,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the type constant (JSON_*) for the value in JSON indicated by Specifiers."
	},
	"llKey2Name": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Avatar or rezzed prim UUID.",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 210,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the name of the prim or avatar specified by ID. The ID must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.\\nFor avatars, the returned name is the legacy name"
	},
	"llKeyCountKeyValue": {
		"arguments": [],
		"energy": 10,
		"experience": true,
		"func-id": 601,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction the request the number of keys in the data store. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will the the number of keys in the system.\n                "
	},
	"llKeysKeyValue": {
		"arguments": [
			{
				"First": {
					"index_semantics": true,
					"tooltip": "Index of the first key to return.",
					"type": "integer"
				}
			},
			{
				"Count": {
					"tooltip": "The number of keys to return.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 602,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction the request a number of keys from the data store. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. The error XP_ERROR_KEY_NOT_FOUND is returned if First is greater than or equal to the number of keys in the data store. In the success case the subsequent items will be the keys requested. The number of keys returned may be less than requested if the return value is too large or if there is not enough keys remaining. The order keys are returned is not guaranteed but is stable between subsequent calls as long as no keys are added or removed. Because the keys are returned in a comma-delimited list it is not recommended to use commas in key names if this function is used.\n                "
	},
	"llLinear2sRGB": {
		"arguments": [
			{
				"color": {
					"tooltip": "A color in the linear colorspace.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 715,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Converts a color from the linear colorspace to sRGB."
	},
	"llLinkAdjustSoundVolume": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Volume": {
					"tooltip": "The volume to set.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 535,
		"return": "void",
		"sleep": 0,
		"tooltip": "Adjusts the volume (0.0 - 1.0) of the currently playing sound attached to the link.\\nThis function has no effect on sounds started with llTriggerSound."
	},
	"llLinkParticleSystem": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Rules": {
					"tooltip": "Particle system rules list in the format [ rule1, data1, rule2, data2 . . . ruleN, dataN ]",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 355,
		"return": "void",
		"sleep": 0,
		"tooltip": "Creates a particle system in prim LinkNumber based on Rules. An empty list removes a particle system from object.\\nList format is [ rule-1, data-1, rule-2, data-2 ... rule-n, data-n ].\\nThis is identical to llParticleSystem except that it applies to a specified linked prim and not just the prim the script is in."
	},
	"llLinkPlaySound": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Flags": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 533,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays Sound, once or looping, at Volume (0.0 - 1.0). The sound may be attached to the link or triggered at its location.\\nOnly one sound may be attached to an object at a time, and attaching a new sound or calling llStopSound will stop the previously attached sound."
	},
	"llLinkSetSoundQueueing": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"QueueEnable": {
					"tooltip": "Boolean, sound queuing for the linked prim: TRUE enables, FALSE disables (default).",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 537,
		"return": "void",
		"sleep": 0,
		"tooltip": "Limits radius for audibility of scripted sounds (both attached and triggered) to distance Radius around the link."
	},
	"llLinkSetSoundRadius": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"radius": {
					"tooltip": "Maximum distance that sounds can be heard.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 536,
		"return": "void",
		"sleep": 0,
		"tooltip": "Limits radius for audibility of scripted sounds (both attached and triggered) to distance Radius around the link."
	},
	"llLinkSitTarget": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag of the prim.",
					"type": "integer"
				}
			},
			{
				"Offset": {
					"tooltip": "Position for the sit target, relative to the prim's position.",
					"type": "vector"
				}
			},
			{
				"Rotation": {
					"tooltip": "Rotation (relative to the prim's rotation) for the avatar.",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 375,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set the sit location for the linked prim(s). If Offset == <0,0,0> clear it.\\nSet the sit location for the linked prim(s). The sit location is relative to the prim's position and rotation."
	},
	"llLinkStopSound": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 534,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stops playback of the currently attached sound on a link."
	},
	"llLinksetDataAvailable": {
		"arguments": [],
		"energy": 10,
		"func-id": 654,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of bytes remaining in the linkset's datastore."
	},
	"llLinksetDataCountFound": {
		"arguments": [
			{
				"search": {
					"tooltip": "A regex search string to match against keys in the datastore.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 661,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of keys matching the regular expression passed in the search parameter."
	},
	"llLinksetDataCountKeys": {
		"arguments": [],
		"energy": 10,
		"func-id": 653,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the number of keys in the linkset's datastore."
	},
	"llLinksetDataDelete": {
		"arguments": [
			{
				"name": {
					"tooltip": "Key to delete from the linkset's datastore.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 652,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Deletes a name:value pair from the linkset's datastore."
	},
	"llLinksetDataDeleteFound": {
		"arguments": [
			{
				"search": {
					"tooltip": "A regex search string to match against keys in the datastore.",
					"type": "string"
				}
			},
			{
				"pass": {
					"tooltip": "The pass phrase used to protect key value pairs in the linkset data",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 662,
		"return": "list",
		"sleep": 0,
		"tooltip": "Deletes all key value pairs in the linkset data where the key matches the regular expression in search. Returns a list consisting of [ #deleted, #not deleted ]."
	},
	"llLinksetDataDeleteProtected": {
		"arguments": [
			{
				"name": {
					"tooltip": "Key to delete from the linkset's datastore.",
					"type": "string"
				}
			},
			{
				"pass": {
					"tooltip": "Pass phrase to access protected data.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 660,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Deletes a name:value pair from the linkset's datastore."
	},
	"llLinksetDataFindKeys": {
		"arguments": [
			{
				"search": {
					"tooltip": "A regex search string to match against keys in the datastore.",
					"type": "string"
				}
			},
			{
				"start": {
					"tooltip": "First entry to return. 0 for start of list.",
					"type": "integer",
					"index_semantics": true
				}
			},
			{
				"count": {
					"tooltip": "Number of entries to return. Less than 1 for all keys.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 657,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of keys from the linkset's data store matching the search parameter."
	},
	"llLinksetDataListKeys": {
		"arguments": [
			{
				"start": {
					"tooltip": "First entry to return. 0 for start of list.",
					"type": "integer",
					"index_semantics": true
				}
			},
			{
				"count": {
					"tooltip": "Number of entries to return. Less than 1 for all keys.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 656,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list of all keys in the linkset datastore."
	},
	"llLinksetDataRead": {
		"arguments": [
			{
				"name": {
					"tooltip": "Key to retrieve from the linkset's datastore.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 651,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the value stored for a key in the linkset."
	},
	"llLinksetDataReadProtected": {
		"arguments": [
			{
				"name": {
					"tooltip": "Key to retrieve from the linkset's datastore.",
					"type": "string"
				}
			},
			{
				"pass": {
					"tooltip": "Pass phrase to access protected data.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 659,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the value stored for a key in the linkset."
	},
	"llLinksetDataReset": {
		"arguments": [],
		"energy": 10,
		"func-id": 655,
		"return": "void",
		"sleep": 0,
		"tooltip": "Resets the linkset's data store, erasing all key-value pairs."
	},
	"llLinksetDataWrite": {
		"arguments": [
			{
				"name": {
					"tooltip": "key for the name:value pair.",
					"type": "string"
				}
			},
			{
				"value": {
					"tooltip": "value to store in the linkset's datastore.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 650,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Sets a name:value pair in the linkset's datastore"
	},
	"llLinksetDataWriteProtected": {
		"arguments": [
			{
				"name": {
					"tooltip": "key for the name:value pair.",
					"type": "string"
				}
			},
			{
				"value": {
					"tooltip": "value to store in the linkset's datastore.",
					"type": "string"
				}
			},
			{
				"pass": {
					"tooltip": "Pass phrase to access protected data.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 658,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Sets a name:value pair in the linkset's datastore"
	},
	"llList2CSV": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 195,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Creates a string of comma separated values from the list.\\nCreate a string of comma separated values from the specified list."
	},
	"llList2Float": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 187,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Copies the float at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a float, then zero is returned."
	},
	"llList2Integer": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 186,
		"native": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Copies the integer at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to an integer, then zero is returned."
	},
	"llList2Json": {
		"arguments": [
			{
				"JsonType": {
					"tooltip": "Type is JSON_ARRAY or JSON_OBJECT.",
					"type": "string"
				}
			},
			{
				"Values": {
					"tooltip": "List of values to convert.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 514,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Converts either a strided list of key:value pairs to a JSON_OBJECT, or a list of values to a JSON_ARRAY."
	},
	"llList2Key": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 189,
		"native": true,
		"pure": true,
		"return": "key",
		"sleep": 0,
		"tooltip": "Copies the key at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a key, then null string is returned."
	},
	"llList2List": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 192,
		"native": true,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a subset of entries from ListVariable, in a range specified by the Start and End indicies (inclusive).\\nUsing negative numbers for Start and/or End causes the index to count backwards from the length of the string, so 0, -1 would capture the entire string.\\nIf Start is greater than End, the sub string is the exclusion of the entries."
	},
	"llList2ListSlice": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Stride": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"slice_index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 801,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a subset of entries from ListVariable, in a range specified by Start and End indices (inclusive) return the slice_index element of each stride.\\n Using negative numbers for Start and/or End causes the index to count backwards from the length of the list. (e.g. 0, -1 captures entire list)\\nIf slice_index is less than 0, it is counted backwards from the end of the stride.\\n Stride must be a positive integer > 0 or an empy list is returned.  If slice_index falls outside range of stride, an empty list is returned. slice_index is zero-based. (e.g. A stride of 2 has valid indices 0,1)"
	},
	"llList2ListStrided": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Stride": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 198,
		"return": "list",
		"sleep": 0,
		"tooltip": "Copies the strided slice of the list from Start to End.\\nReturns a copy of the strided slice of the specified list from Start to End."
	},
	"llList2Rot": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 191,
		"native": true,
		"pure": true,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Copies the rotation at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to rotation, thenZERO_ROTATION is returned."
	},
	"llList2String": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 188,
		"native": true,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Copies the string at Index in the list.\\nReturns the value at Index in the specified list as a string. If Index describes a location not in the list then null string is returned."
	},
	"llList2Vector": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Index": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 190,
		"native": true,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Copies the vector at Index in the list.\\nReturns the value at Index in the specified list. If Index describes a location not in the list, or the value cannot be type-cast to a vector, then ZERO_VECTOR is returned."
	},
	"llListFindList": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Find": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 201,
		"index_semantics": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the index of the first instance of Find in ListVariable. Returns -1 if not found.\\nReturns the position of the first instance of the Find list in the ListVariable. Returns -1 if not found."
	},
	"llListFindListNext": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Find": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Instance": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 803,
		"index_semantics": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the index of the nth instance of Find in ListVariable. Returns -1 if not found."
	},
	"llListFindStrided": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Find": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"End": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Stride": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 800,
		"index_semantics": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the index of the first instance of Find in ListVariable. Returns -1 if not found.\\nReturns the position of the first instance of the Find list in the ListVariable after the start index and before the end index. Steps through ListVariable by stride.  Returns -1 if not found."
	},
	"llListInsertList": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Position": {
					"index_semantics": true,
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 200,
		"native": true,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list that contains all the elements from Target but with the elements from ListVariable inserted at Position start.\\nReturns a new list, created by inserting ListVariable into the Target list at Position. Note this does not alter the Target."
	},
	"llListRandomize": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Stride": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 197,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a version of the input ListVariable which has been randomized by blocks of size Stride.\\nIf the remainder from the length of the list, divided by the stride is non-zero, this function does not randomize the list."
	},
	"llListReplaceList": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"ListVariable": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Start": {
					"tooltip": "",
					"type": "integer",
					"index_semantics": true
				}
			},
			{
				"End": {
					"tooltip": "",
					"type": "integer",
					"index_semantics": true
				}
			}
		],
		"energy": 10,
		"func-id": 296,
		"native": true,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns a list that is Target with Start through End removed and ListVariable inserted at Start.\\nReturns a list replacing the slice of the Target list from Start to End with the specified ListVariable. Start and End are inclusive, so 0, 1 would replace the first two entries and 0, 0 would replace only the first list entry."
	},
	"llListSort": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "List to sort.",
					"type": "list"
				}
			},
			{
				"Stride": {
					"tooltip": "Stride length.",
					"type": "integer"
				}
			},
			{
				"Ascending": {
					"tooltip": "Boolean. TRUE = result in ascending order, FALSE = result in descending order.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 184,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns the specified list, sorted into blocks of stride in ascending order (if Ascending is TRUE, otherwise descending). Note that sort only works if the first entry of each block is the same datatype."
	},
	"llListSortStrided": {
		"arguments": [
			{
				"ListVariable": {
					"tooltip": "List to sort.",
					"type": "list"
				}
			},
			{
				"Stride": {
					"tooltip": "Stride length.",
					"type": "integer"
				}
			},
			{
				"Sortkey": {
					"tooltip": "The zero based element within the stride to use as the sort key",
					"type": "integer",
					"index_semantics": true
				}
			},
			{
				"Ascending": {
					"tooltip": "Boolean. TRUE = result in ascending order, FALSE = result in descending order.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 802,
		"return": "list",
		"sleep": 0,
		"tooltip": "Returns the specified list, sorted by the specified element into blocks of stride in ascending order (if Ascending is TRUE, otherwise descending). Note that sort only works if the first entry of each block is the same datatype."
	},
	"llListStatistics": {
		"arguments": [
			{
				"Operation": {
					"tooltip": "One of LIST_STAT_* values",
					"type": "integer"
				}
			},
			{
				"ListVariable": {
					"tooltip": "Variable to analyze.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 315,
		"return": "float",
		"sleep": 0,
		"tooltip": "Performs a statistical aggregate function, specified by a LIST_STAT_* constant, on ListVariables.\\nThis function allows a script to perform a statistical operation as defined by operation on a list composed of integers and floats."
	},
	"llListen": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"SpeakersName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"SpeakersID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 25,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Creates a listen callback for Text on Channel from SpeakersName and SpeakersID (SpeakersName, SpeakersID, and/or Text can be empty) and returns an identifier that can be used to deactivate or remove the listen.\\nNon-empty values for SpeakersName, SpeakersID, and Text will filter the results accordingly, while empty strings and NULL_KEY will not filter the results, for string and key parameters respectively.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts."
	},
	"llListenControl": {
		"arguments": [
			{
				"ChannelHandle": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Active": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 26,
		"return": "void",
		"sleep": 0,
		"tooltip": "Makes a listen event callback active or inactive. Pass in the value returned from llListen to the iChannelHandle parameter to specify which listener you are controlling.\\nUse boolean values to specify Active"
	},
	"llListenRemove": {
		"arguments": [
			{
				"ChannelHandle": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 27,
		"return": "void",
		"sleep": 0,
		"tooltip": "Removes a listen event callback. Pass in the value returned from llListen to the iChannelHandle parameter to specify which listener to remove."
	},
	"llLoadURL": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"URL": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 297,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Shows dialog to avatar AvatarID offering to load web page at URL.\tIf user clicks yes, launches their web browser.\\nllLoadURL displays a dialogue box to the user, offering to load the specified web page using the default web browser."
	},
	"llLog": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 265,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the natural logarithm of Value. Returns zero if Value <= 0.\\nReturns the base e (natural) logarithm of the specified Value."
	},
	"llLog10": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 264,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the base 10 logarithm of Value. Returns zero if Value <= 0.\\nReturns the base 10 (common) logarithm of the specified Value."
	},
	"llLookAt": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Strength": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Damping": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 105,
		"return": "void",
		"sleep": 0,
		"tooltip": "Cause object name to point its forward axis towards Target, at a force controlled by Strength and Damping.\\nGood Strength values are around half the mass of the object and good Damping values are less than 1/10th of the Strength.\\nAsymmetrical shapes require smaller Damping. A Strength of 0.0 cancels the look at."
	},
	"llLoopSound": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 87,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays specified Sound, looping indefinitely, at Volume (0.0 - 1.0).\\nOnly one sound may be attached to an object at a time.\\nA second call to llLoopSound with the same key will not restart the sound, but the new volume will be used. This allows control over the volume of already playing sounds.\\nSetting the volume to 0 is not the same as calling llStopSound; a sound with 0 volume will continue to loop.\\nTo restart the sound from the beginning, call llStopSound before calling llLoopSound again."
	},
	"llLoopSoundMaster": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 88,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays attached Sound, looping at volume (0.0 - 1.0), and declares it a sync master.\\nBehaviour is identical to llLoopSound, with the addition of marking the source as a \"Sync Master\", causing \"Slave\" sounds to sync to it. If there are multiple masters within a viewers interest area, the most audible one (a function of both distance and volume) will win out as the master.\\nThe use of multiple masters within a small area is unlikely to produce the desired effect."
	},
	"llLoopSoundSlave": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 89,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master.\\nBehaviour is identical to llLoopSound, unless there is a \"Sync Master\" present.\\nIf a Sync Master is already playing the Slave sound will begin playing from the same point the master is in its loop synchronizing the loop points of both sounds.\\nIf a Sync Master is started when the Slave is already playing, the Slave will skip to the correct position to sync with the Master."
	},
	"llMD5String": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Nonce": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 258,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string of 32 hex characters that is an RSA Data Security Inc., MD5 Message-Digest Algorithm of Text with Nonce used as the salt.\\nReturns a 32-character hex string. (128-bit in binary.)"
	},
	"llMakeExplosion": {
		"arguments": [
			{
				"Particles": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Scale": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Lifetime": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 100,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Make a round explosion of particles. Deprecated: Use llParticleSystem instead.\\nMake a round explosion of particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead."
	},
	"llMakeFire": {
		"arguments": [
			{
				"Particles": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Scale": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Lifetime": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 103,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Make fire like particles. Deprecated: Use llParticleSystem instead.\\nMake fire particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead."
	},
	"llMakeFountain": {
		"arguments": [
			{
				"Particles": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Scale": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Lifetime": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Bounce": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Bounce_Offset": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 101,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Make a fountain of particles. Deprecated: Use llParticleSystem instead.\\nMake a fountain of particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead."
	},
	"llMakeSmoke": {
		"arguments": [
			{
				"Particles": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Scale": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Lifetime": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 102,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Make smoke like particles. Deprecated: Use llParticleSystem instead.\\nMake smoky particles using texture from the objects inventory. Deprecated: Use llParticleSystem instead."
	},
	"llManageEstateAccess": {
		"arguments": [
			{
				"Action": {
					"tooltip": "One of the ESTATE_ACCESS_ALLOWED_* actions.",
					"type": "integer"
				}
			},
			{
				"AvatarID": {
					"tooltip": "UUID of the avatar or group to act upon.",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 393,
		"return": "integer",
		"bool_semantics": true,
		"sleep": 0,
		"tooltip": "Adds or removes agents from the estate's agent access or ban lists, or groups to the estate's group access list. Action is one of the ESTATE_ACCESS_ALLOWED_* operations to perform.\\nReturns an integer representing a boolean, TRUE if the call was successful; FALSE if throttled, invalid action, invalid or null id or object owner is not allowed to manage the estate.\\nThe object owner is notified of any changes, unless PERMISSION_SILENT_ESTATE_MANAGEMENT has been granted to the script."
	},
	"llMapBeacon": {
		"arguments": [
			{
				"RegionName": {
					"tooltip": "Region in which to show the beacon.",
					"type": "string"
				}
			},
			{
				"Position": {
					"tooltip": "Position within region to show the beacon.",
					"type": "vector"
				}
			},
			{
				"Options": {
					"tooltip": "Options",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 516,
		"return": "void",
		"sleep": 1,
		"tooltip": "Displays an in world beacon and optionally opens world map for avatar who touched the object or is wearing the script, centered on RegionName with Position highlighted. Only works for scripts attached to avatar, or during touch events."
	},
	"llMapDestination": {
		"arguments": [
			{
				"RegionName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Direction": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 309,
		"return": "void",
		"sleep": 1,
		"tooltip": "Opens world map for avatar who touched is is wearing the script, centred on RegionName with Position highlighted. Only works for scripts attached to avatar, or during touch events.\\nDirection currently has no effect."
	},
	"llMessageLinked": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Number": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 164,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sends Number, Text, and ID to members of the link set identified by LinkNumber.\\nLinkNumber is either a linked number (available through llGetLinkNumber) or a LINK_* constant."
	},
	"llMinEventDelay": {
		"arguments": [
			{
				"Delay": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 125,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set the minimum time between events being handled."
	},
	"llModPow": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Power": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Modulus": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 300,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns a Value raised to the Power, mod Modulus. ((a**b)%c) b is capped at 0xFFFF (16 bits).\\nReturns (Value ^ Power) % Modulus. (Value raised to the Power, Modulus). Value is capped at 0xFFFF (16 bits)."
	},
	"llModifyLand": {
		"arguments": [
			{
				"Action": {
					"tooltip": "LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE or LAND_REVERT",
					"type": "integer"
				}
			},
			{
				"Area": {
					"tooltip": "0, 1, 2 (2m x 2m, 4m x 4m, or 8m x 8m)",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 159,
		"return": "void",
		"sleep": 0,
		"tooltip": "Modify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT) on size (0, 1, 2, corresponding to 2m x 2m, 4m x 4m, 8m x 8m)."
	},
	"llMoveToTarget": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Tau": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 70,
		"return": "void",
		"sleep": 0,
		"tooltip": "Critically damp to Target in Tau seconds (if the script is physical).\\nCritically damp to position target in tau-seconds if the script is physical. Good tau-values are greater than 0.2. A tau of 0.0 stops the critical damping."
	},
	"llName2Key": {
		"arguments": [
			{
				"Name": {
					"tooltip": "Name of agent in region to look up.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 524,
		"return": "key",
		"sleep": 0,
		"tooltip": "Look up Agent ID for the named agent in the region."
	},
	"llNavigateTo": {
		"arguments": [
			{
				"Location": {
					"tooltip": "Region coordinates for the character to navigate to.",
					"type": "vector"
				}
			},
			{
				"Options": {
					"tooltip": "List of parameters to control the type of path-finding used. Currently only FORCE_DIRECT_PATH supported.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 398,
		"return": "void",
		"sleep": 0,
		"tooltip": "Navigate to destination.\\nDirects an object to travel to a defined position in the region or adjacent regions."
	},
	"llOffsetTexture": {
		"arguments": [
			{
				"OffsetS": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"OffsetT": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 55,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the texture S and T offsets for the chosen Face.\\nIf Face is ALL_SIDES this function sets the texture offsets for all faces."
	},
	"llOpenFloater": {
		"arguments": [
			{
				"floater_name": {
					"tooltip": "Identifier for floater to open",
					"type": "string"
				}
			},
			{
				"url": {
					"tooltip": "URL to pass to floater",
					"type": "string"
				}
			},
			{
				"params": {
					"tooltip": "Parameters to apply to open floater",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"linden-experience": true,
		"func-id": 604,
		"mono_sleep": 0.2,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the value for header for request_id.\\nReturns a string that is the value of the Header for HTTPRequestID."
	},
	"llOpenRemoteDataChannel": {
		"arguments": [],
		"deprecated": true,
		"energy": 10,
		"func-id": 254,
		"return": "void",
		"sleep": 1,
		"tooltip": "This function is deprecated."
	},
	"llOrd": {
		"arguments": [
			{
				"value": {
					"tooltip": "The string to convert to Unicode.",
					"type": "string"
				}
			},
			{
				"index": {
					"tooltip": "Index of character to convert to unicode.",
					"type": "integer",
					"index_semantics": true
				}
			}
		],
		"energy": 10,
		"func-id": 527,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns the unicode value of the indicated character in the string."
	},
	"llOverMyLand": {
		"arguments": [
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 215,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if id ID over land owned by the script owner, otherwise FALSE.\\nReturns TRUE if key ID is over land owned by the object owner, FALSE otherwise."
	},
	"llOwnerSay": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 292,
		"return": "void",
		"sleep": 0,
		"tooltip": "says Text to owner only (if owner is in region).\\nSays Text to the owner of the object running the script, if the owner has been within the object's simulator since logging into Second Life, regardless of where they may be in-world."
	},
	"llParcelMediaCommandList": {
		"arguments": [
			{
				"CommandList": {
					"tooltip": "A list of PARCEL_MEDIA_COMMAND_* flags and their parameters ",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 298,
		"return": "void",
		"sleep": 2,
		"tooltip": "Controls the playback of multimedia resources on a parcel or for an agent, via one or more PARCEL_MEDIA_COMMAND_* arguments specified in CommandList."
	},
	"llParcelMediaQuery": {
		"arguments": [
			{
				"QueryList": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 299,
		"return": "list",
		"sleep": 2,
		"tooltip": "Queries the media properties of the parcel containing the script, via one or more PARCEL_MEDIA_COMMAND_* arguments specified in CommandList.\\nThis function will only work if the script is contained within an object owned by the land-owner (or if the land is owned by a group, only if the object has been deeded to the group)."
	},
	"llParseString2List": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Separators": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Spacers": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 214,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Converts Text into a list, discarding Separators, keeping Spacers (Separators and Spacers must be lists of strings, maximum of 8 each).\\nSeparators and Spacers are lists of strings with a maximum of 8 entries each."
	},
	"llParseStringKeepNulls": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Separators": {
					"tooltip": "",
					"type": "list"
				}
			},
			{
				"Spacers": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 285,
		"pure": true,
		"return": "list",
		"sleep": 0,
		"tooltip": "Breaks Text into a list, discarding separators, keeping spacers, keeping any null values generated. (separators and spacers must be lists of strings, maximum of 8 each).\\nllParseStringKeepNulls works almost exactly like llParseString2List, except that if a null is found it will add a null-string instead of discarding it like llParseString2List does."
	},
	"llParticleSystem": {
		"arguments": [
			{
				"Parameters": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 229,
		"return": "void",
		"sleep": 0,
		"tooltip": "Creates a particle system in the prim the script is attached to, based on Parameters. An empty list removes a particle system from object.\\nList format is [ rule-1, data-1, rule-2, data-2 ... rule-n, data-n ]."
	},
	"llPassCollisions": {
		"arguments": [
			{
				"Pass": {
					"tooltip": "Boolean, if TRUE, collisions are passed from children on to parents.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 166,
		"return": "void",
		"sleep": 0,
		"tooltip": "Configures how collision events are passed to scripts in the linkset.\\nIf Pass == TRUE, collisions involving collision-handling scripted child prims are also passed on to the root prim. If Pass == FALSE (default behavior), such collisions will only trigger events in the affected child prim."
	},
	"llPassTouches": {
		"arguments": [
			{
				"Pass": {
					"tooltip": "Boolean, if TRUE, touches are passed from children on to parents.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 154,
		"return": "void",
		"sleep": 0,
		"tooltip": "Configures how touch events are passed to scripts in the linkset.\\nIf Pass == TRUE, touches involving touch-handling scripted child prims are also passed on to the root prim. If Pass == FALSE (default behavior), such touches will only trigger events in the affected child prim."
	},
	"llPatrolPoints": {
		"arguments": [
			{
				"Points": {
					"tooltip": "A list of vectors for the character to travel through sequentially. The list must contain at least two entries.",
					"type": "list"
				}
			},
			{
				"Options": {
					"tooltip": "No options available at this time.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 403,
		"return": "void",
		"sleep": 0,
		"tooltip": "Patrol a list of points.\\nSets the points for a character (llCreateCharacter) to patrol along."
	},
	"llPlaySound": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 86,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays Sound once, at Volume (0.0 - 1.0) and attached to the object.\\nOnly one sound may be attached to an object at a time, and attaching a new sound or calling llStopSound will stop the previously attached sound.\\nA second call to llPlaySound with the same sound will not restart the sound, but the new volume will be used, which allows control over the volume of already playing sounds.\\nTo restart the sound from the beginning, call llStopSound before calling llPlaySound again."
	},
	"llPlaySoundSlave": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 90,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays attached Sound once, at Volume (0.0 - 1.0), synced to next loop of most audible sync master.\\nBehaviour is identical to llPlaySound, unless there is a \"Sync Master\" present. If a Sync Master is already playing, the Slave sound will not be played until the Master hits its loop point and returns to the beginning.\\nllPlaySoundSlave will play the sound exactly once; if it is desired to have the sound play every time the Master loops, either use llLoopSoundSlave with extra silence padded on the end of the sound or ensure that llPlaySoundSlave is called at least once per loop of the Master."
	},
	"llPointAt": {
		"arguments": [
			{
				"Point": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 131,
		"private": true,
		"return": "void",
		"sleep": 0,
		"tooltip": ""
	},
	"llPow": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Exponent": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 5,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the Value raised to the power Exponent, or returns 0 and triggers Math Error for imaginary results.\\nReturns the Value raised to the Exponent."
	},
	"llPreloadSound": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 93,
		"return": "void",
		"sleep": 1,
		"tooltip": "Causes nearby viewers to preload the Sound from the object's inventory.\\nThis is intended to prevent delays in starting new sounds when called upon."
	},
	"llPursue": {
		"arguments": [
			{
				"TargetID": {
					"tooltip": "Agent or object to pursue.",
					"type": "key"
				}
			},
			{
				"Options": {
					"tooltip": "Parameters for pursuit.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 400,
		"return": "void",
		"sleep": 0,
		"tooltip": "Chase after a target.\\nCauses the character (llCharacter) to pursue the target defined by TargetID."
	},
	"llPushObject": {
		"arguments": [
			{
				"ObjectID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Impulse": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"AngularImpulse": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 165,
		"return": "void",
		"sleep": 0,
		"tooltip": "Applies Impulse and AngularImpulse to ObjectID.\\nApplies the supplied impulse and angular impulse to the object specified."
	},
	"llReadKeyValue": {
		"arguments": [
			{
				"Key": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 388,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction to retrieve the value associated with the key given. Will fail with XP_ERROR_KEY_NOT_FOUND if the key does not exist. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key.\n                "
	},
	"llRefreshPrimURL": {
		"arguments": [],
		"deprecated": true,
		"energy": 10,
		"func-id": 306,
		"return": "void",
		"sleep": 20,
		"tooltip": "Reloads the web page shown on the sides of the object."
	},
	"llRegionSay": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "Any integer value except zero.",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "Message to be transmitted.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 331,
		"return": "void",
		"sleep": 0,
		"tooltip": "Broadcasts Text to entire region on Channel (except for channel 0)."
	},
	"llRegionSayTo": {
		"arguments": [
			{
				"TargetID": {
					"tooltip": "Avatar or object to say to.",
					"type": "key"
				}
			},
			{
				"Channel": {
					"tooltip": "Output channel, any integer value.",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "Message to be transmitted.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 364,
		"return": "void",
		"sleep": 0,
		"tooltip": "Says Text, on Channel, to avatar or object indicated by TargetID (if within region).\\nIf TargetID is an avatar and Channel is nonzero, Text can be heard by any attachment on the avatar."
	},
	"llReleaseCamera": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 116,
		"return": "void",
		"sleep": 0,
		"tooltip": "Return camera to agent.\\nDeprecated: Use llClearCameraParams instead."
	},
	"llReleaseControls": {
		"arguments": [],
		"energy": 10,
		"func-id": 112,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stop taking inputs.\\nStop taking inputs from the avatar."
	},
	"llReleaseURL": {
		"arguments": [
			{
				"URL": {
					"tooltip": "URL to release.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 347,
		"return": "void",
		"sleep": 0,
		"tooltip": "Releases the specified URL, which was previously obtained using llRequestURL.  Once released, the URL will no longer be usable."
	},
	"llRemoteDataReply": {
		"arguments": [
			{
				"ChannelID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"MessageID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"sData": {
					"tooltip": "String data to send",
					"type": "string"
				}
			},
			{
				"iData": {
					"tooltip": "Integer data to send",
					"type": "integer"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 256,
		"return": "void",
		"sleep": 3,
		"tooltip": "This function is deprecated."
	},
	"llRemoteDataSetRegion": {
		"arguments": [],
		"deprecated": true,
		"energy": 10,
		"func-id": 263,
		"return": "void",
		"sleep": 0,
		"tooltip": "This function is deprecated."
	},
	"llRemoteLoadScript": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"ScriptName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Unknown1": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Unknown2": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 251,
		"private": true,
		"return": "void",
		"sleep": 3,
		"tooltip": ""
	},
	"llRemoteLoadScriptPin": {
		"arguments": [
			{
				"ObjectID": {
					"tooltip": "Target prim to attempt copying into.",
					"type": "key"
				}
			},
			{
				"ScriptName": {
					"tooltip": "Name of the script in current inventory to copy.",
					"type": "string"
				}
			},
			{
				"PIN": {
					"tooltip": "Integer set on target prim as a Personal Information Number code.",
					"type": "integer"
				}
			},
			{
				"Running": {
					"tooltip": "If the script should be set running in the target prim.",
					"type": "integer"
				}
			},
			{
				"StartParameter": {
					"tooltip": "Integer. Parameter passed to the script if set to be running.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 253,
		"return": "void",
		"sleep": 3,
		"tooltip": "If the owner of the object containing this script can modify the object identified by the specified object key, and if the PIN matches the PIN previously set using llSetRemoteScriptAccessPin (on the target prim), then the script will be copied into target. Running is a boolean specifying whether the script should be enabled once copied into the target object."
	},
	"llRemoveFromLandBanList": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 312,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Remove avatar from the land ban list.\\nRemove specified avatar from the land parcel ban list."
	},
	"llRemoveFromLandPassList": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 311,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Remove avatar from the land pass list.\\nRemove specified avatar from the land parcel pass list."
	},
	"llRemoveInventory": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 151,
		"return": "void",
		"sleep": 0,
		"tooltip": "Remove the named inventory item.\\nRemove the named inventory item from the object inventory."
	},
	"llRemoveVehicleFlags": {
		"arguments": [
			{
				"Vehiclelags": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 237,
		"return": "void",
		"sleep": 0,
		"tooltip": "Removes the enabled bits in 'flags'.\\nSets the vehicle flags to FALSE. Valid parameters can be found in the vehicle flags constants section."
	},
	"llReplaceAgentEnvironment": {
		"arguments": [
			{
				"agent_id": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"transition": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"environment": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 713,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Replaces the entire environment for an agent. Must be used as part of an experience."
	},
	"llReplaceEnvironment": {
		"arguments": [
			{
				"position": {
					"tooltip": "Location of parcel to change. Use <-1, -1, -1> for entire region.",
					"type": "vector"
				}
			},
			{
				"environment": {
					"tooltip": "Name of inventory item, or UUID of environment resource to apply.\n                         Use NULL_KEY or empty string to remove environment.",
					"type": "string"
				}
			},
			{
				"track_no": {
					"tooltip": "Elevation zone of where to apply environment. Use -1 for all.",
					"type": "integer"
				}
			},
			{
				"day_length": {
					"tooltip": "Length of day cycle for this parcel or region. -1 to leave unchanged.",
					"type": "integer"
				}
			},
			{
				"day_offset": {
					"tooltip": "Offset from GMT for the day cycle on this parcel or region. -1 to leave unchanged.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 718,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Replaces the environment for a parcel or region."
	},
	"llReplaceSubString": {
		"arguments": [
			{
				"InitialString": {
					"tooltip": "The original string in which to hunt for substring matches.",
					"type": "string"
				}
			},
			{
				"SubString": {
					"tooltip": "The original substring to find.",
					"type": "string"
				}
			},
			{
				"NewSubString": {
					"tooltip": "The new substring used to replace.",
					"type": "string"
				}
			},
			{
				"Count": {
					"tooltip": "The max number of replacements to make. Zero Count means \"replace all\". Positive Count moves left to right. Negative moves right to left.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 541,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Searches InitialString and replaces instances of SubString with NewSubString. Zero Count means \"replace all\". Positive Count moves left to right. Negative moves right to left."
	},
	"llRequestAgentData": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Data": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 155,
		"return": "key",
		"sleep": 0.1,
		"tooltip": "Requests data about AvatarID. When data is available the dataserver event will be raised.\\nThis function requests data about an avatar. If and when the information is collected, the dataserver event is triggered with the key returned from this function passed in the requested parameter. See the agent data constants (DATA_*) for details about valid values of data and what each will return in the dataserver event."
	},
	"llRequestDisplayName": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "Avatar UUID",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 361,
		"return": "key",
		"sleep": 0,
		"tooltip": "Requests the display name of the agent. When the display name is available the dataserver event will be raised.\\nThe avatar identified does not need to be in the same region or online at the time of the request.\\nReturns a key that is used to identify the dataserver event when it is raised."
	},
	"llRequestExperiencePermissions": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"unused": {
					"tooltip": "Not used, should be \"\"",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 384,
		"return": "void",
		"sleep": 0,
		"tooltip": "\n                   Ask the agent for permission to participate in an experience. This request is similar to llRequestPermissions with the following permissions: PERMISSION_TAKE_CONTROLS, PERMISSION_TRIGGER_ANIMATION, PERMISSION_ATTACH, PERMISSION_TRACK_CAMERA, PERMISSION_CONTROL_CAMERA and PERMISSION_TELEPORT. However, unlike llRequestPermissions the decision to allow or block the request is persistent and applies to all scripts using the experience grid wide. Subsequent calls to llRequestExperiencePermissions from scripts in the experience will receive the same response automatically with no user interaction. One of experience_permissions or experience_permissions_denied will be generated in response to this call. Outstanding permission requests will be lost if the script is derezzed, moved to another region or reset.\n                "
	},
	"llRequestInventoryData": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 156,
		"return": "key",
		"sleep": 1,
		"tooltip": "Requests data for the named InventoryItem.\\nWhen data is available, the dataserver event will be raised with the key returned from this function in the requested parameter.\\nThe only request currently implemented is to request data from landmarks, where the data returned is in the form \"<float, float, float>\" which can be cast to a vector. This position is in region local coordinates."
	},
	"llRequestPermissions": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"PermissionMask": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 136,
		"return": "void",
		"sleep": 0,
		"tooltip": "Ask AvatarID to allow the script to perform certain actions, specified in the PermissionMask bitmask. PermissionMask should be one or more PERMISSION_* constants. Multiple permissions can be requested simultaneously by ORing the constants together. Many of the permissions requests can only go to object owner.\\nThis call will not stop script execution. If the avatar grants the requested permissions, the run_time_permissions event will be called."
	},
	"llRequestSecureURL": {
		"arguments": [],
		"energy": 10,
		"func-id": 346,
		"return": "key",
		"sleep": 0,
		"tooltip": "Requests one HTTPS:// (SSL) URL for use by this object. The http_request event is triggered with results.\\nReturns a key that is the handle used for identifying the request in the http_request event."
	},
	"llRequestSimulatorData": {
		"arguments": [
			{
				"RegionName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Data": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 293,
		"return": "key",
		"sleep": 1,
		"tooltip": "Requests the specified Data about RegionName. When the specified data is available, the dataserver event is raised.\\nData should use one of the DATA_SIM_* constants.\\nReturns a dataserver query ID and triggers the dataserver event when data is found."
	},
	"llRequestURL": {
		"arguments": [],
		"energy": 10,
		"func-id": 345,
		"return": "key",
		"sleep": 0,
		"tooltip": "Requests one HTTP:// URL for use by this script. The http_request event is triggered with the result of the request.\\nReturns a key that is the handle used for identifying the result in the http_request event."
	},
	"llRequestUserKey": {
		"arguments": [
			{
				"Name": {
					"tooltip": "Name of agent to look up.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 525,
		"return": "key",
		"sleep": 0,
		"tooltip": "Look up Agent ID for the named agent using a historical name."
	},
	"llRequestUsername": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 359,
		"return": "key",
		"sleep": 0,
		"tooltip": "Requests single-word user-name of an avatar. When data is available the dataserver event will be raised.\\nRequests the user-name of the identified agent. When the user-name is available the dataserver event is raised.\\nThe agent identified does not need to be in the same region or online at the time of the request.\\nReturns a key that is used to identify the dataserver event when it is raised."
	},
	"llResetAnimationOverride": {
		"arguments": [
			{
				"AnimationState": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 502,
		"return": "void",
		"sleep": 0,
		"tooltip": "Resets the animation of the specified animation state to the default value.\\nIf animation state equals \"ALL\", then all animation states are reset."
	},
	"llResetLandBanList": {
		"arguments": [],
		"energy": 10,
		"func-id": 321,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Removes all residents from the land ban list."
	},
	"llResetLandPassList": {
		"arguments": [],
		"energy": 10,
		"func-id": 322,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Removes all residents from the land access/pass list."
	},
	"llResetOtherScript": {
		"arguments": [
			{
				"ScriptName": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 249,
		"return": "void",
		"sleep": 0,
		"tooltip": "Resets the named script."
	},
	"llResetScript": {
		"arguments": [],
		"energy": 10,
		"func-id": 163,
		"return": "void",
		"sleep": 0,
		"tooltip": "Resets the script."
	},
	"llResetTime": {
		"arguments": [],
		"energy": 10,
		"func-id": 83,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the time to zero.\\nSets the internal timer to zero."
	},
	"llReturnObjectsByID": {
		"arguments": [
			{
				"ObjectIDs": {
					"tooltip": "List of object UUIDs to be returned.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 520,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Return objects using their UUIDs.\\nRequires the PERMISSION_RETURN_OBJECTS permission and that the script owner owns the parcel the returned objects are in, or is an estate manager or region owner."
	},
	"llReturnObjectsByOwner": {
		"arguments": [
			{
				"ID": {
					"tooltip": "Object owner's UUID.",
					"type": "key"
				}
			},
			{
				"Scope": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 521,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Return objects based upon their owner and a scope of parcel, parcel owner, or region.\\nRequires the PERMISSION_RETURN_OBJECTS permission and that the script owner owns the parcel the returned objects are in, or is an estate manager or region owner."
	},
	"llRezAtRoot": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			},
			{
				"StartParameter": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 200,
		"func-id": 286,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Instantiate owner's InventoryItem at Position with Velocity, Rotation and with StartParameter. The last selected root object's location will be set to Position.\\nCreates object's inventory item at the given Position, with Velocity, Rotation, and StartParameter."
	},
	"llRezObject": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Velocity": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			},
			{
				"StartParameter": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 200,
		"func-id": 104,
		"return": "void",
		"sleep": 0.1,
		"tooltip": "Instantiate owners InventoryItem at Position with Velocity, Rotation and with start StartParameter.\\nCreates object's inventory item at Position with Velocity and Rotation supplied. The StartParameter value will be available to the newly created object in the on_rez event or through the llGetStartParameter function.\\nThe Velocity parameter is ignored if the rezzed object is not physical."
	},
	"llRezObjectWithParams": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Parms": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 200,
		"func-id": 544,
		"return": "key",
		"sleep": 0.1,
		"tooltip": "Instantiate owner's InventoryItem with the given parameters."
	},
	"llRot2Angle": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 171,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the rotation angle represented by Rotation.\\nReturns the angle represented by the Rotation."
	},
	"llRot2Axis": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 170,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the rotation axis represented by Rotation.\\nReturns the axis represented by the Rotation."
	},
	"llRot2Euler": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 15,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the Euler representation (roll, pitch, yaw) of Rotation.\\nReturns the Euler Angle representation of the Rotation."
	},
	"llRot2Fwd": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 18,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the forward vector defined by Rotation.\\nReturns the forward axis represented by the Rotation."
	},
	"llRot2Left": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 19,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the left vector defined by Rotation.\\nReturns the left axis represented by the Rotation."
	},
	"llRot2Up": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 20,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the up vector defined by Rotation.\\nReturns the up axis represented by the Rotation."
	},
	"llRotBetween": {
		"arguments": [
			{
				"Vector1": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Vector2": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 21,
		"pure": true,
		"return": "rotation",
		"sleep": 0,
		"tooltip": "Returns the rotation to rotate Vector1 to Vector2.\\nReturns the rotation needed to rotate Vector1 to Vector2."
	},
	"llRotLookAt": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			},
			{
				"Strength": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Damping": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 127,
		"return": "void",
		"sleep": 0,
		"tooltip": "Cause object to rotate to Rotation, with a force function defined by Strength and Damping parameters. Good strength values are around half the mass of the object and good damping values are less than 1/10th of the strength.\\nAsymmetrical shapes require smaller damping.\\nA strength of 0.0 cancels the look at."
	},
	"llRotTarget": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			},
			{
				"LeeWay": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 68,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Set rotations with error of LeeWay radians as a rotational target, and return an ID for the rotational target.\\nThe returned number is a handle that can be used in at_rot_target and llRotTargetRemove."
	},
	"llRotTargetRemove": {
		"arguments": [
			{
				"Handle": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 69,
		"return": "void",
		"sleep": 0,
		"tooltip": "Removes rotational target number.\\nRemove rotational target indicated by the handle."
	},
	"llRotateTexture": {
		"arguments": [
			{
				"Radians": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 56,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the texture rotation for the specified Face to angle Radians.\\nIf Face is ALL_SIDES, rotates the texture of all sides."
	},
	"llRound": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 11,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns Value rounded to the nearest integer.\\nReturns the Value rounded to the nearest integer."
	},
	"llSHA1String": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 343,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string of 40 hex characters that is the SHA1 security hash of text."
	},
	"llSHA256String": {
		"arguments": [
			{
				"text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 531,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string of 64 hex characters that is the SHA256 security hash of text."
	},
	"llSameGroup": {
		"arguments": [
			{
				"ID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 219,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if avatar ID is in the same region and has the same active group, otherwise FALSE.\\nReturns TRUE if the object or agent identified is in the same simulator and has the same active group as this object. Otherwise, returns FALSE."
	},
	"llSay": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "Channel to use to say text on.",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "Text to say.",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 23,
		"return": "void",
		"sleep": 0,
		"tooltip": "Says Text on Channel.\\nThis chat method has a range of 20m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts."
	},
	"llScaleByFactor": {
		"arguments": [
			{
				"ScalingFactor": {
					"tooltip": "The multiplier to be used with the prim sizes and their local positions.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 592,
		"return": "integer",
		"bool_semantics": true,
		"sleep": 0,
		"tooltip": "Attempts to resize the entire object by ScalingFactor, maintaining the size-position ratios of the prims.\\n\\nResizing is subject to prim scale limits and linkability limits. This function can not resize the object if the linkset is physical, a pathfinding character, in a keyframed motion, or if resizing would cause the parcel to overflow.\\nReturns a boolean (an integer) TRUE if it succeeds, FALSE if it fails."
	},
	"llScaleTexture": {
		"arguments": [
			{
				"Horizontal": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Vertical": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 54,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the diffuse texture Horizontal and Vertical repeats on Face of the prim the script is attached to.\\nIf Face == ALL_SIDES, all sides are set in one call.\\nNegative values for horizontal and vertical will flip the texture."
	},
	"llScriptDanger": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 246,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if Position is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts.\\nReturns true if the position is over public land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts."
	},
	"llScriptProfiler": {
		"arguments": [
			{
				"State": {
					"tooltip": "PROFILE_NONE or PROFILE_SCRIPT_MEMORY flags to control the state.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 367,
		"return": "void",
		"sleep": 0,
		"tooltip": "Enables or disables script profiling options. Currently only supports PROFILE_SCRIPT_MEMORY (Mono only) and PROFILE_NONE.\\nMay significantly reduce script performance."
	},
	"llSendRemoteData": {
		"arguments": [
			{
				"ChannelID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Destination": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 255,
		"return": "key",
		"sleep": 3,
		"tooltip": "This function is deprecated."
	},
	"llSensor": {
		"arguments": [
			{
				"Name": {
					"tooltip": "Object or avatar name.",
					"type": "string"
				}
			},
			{
				"ID": {
					"tooltip": "Object or avatar UUID.",
					"type": "key"
				}
			},
			{
				"Type": {
					"tooltip": "Bit-field mask of AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED",
					"type": "integer"
				}
			},
			{
				"Range": {
					"tooltip": "Distance to scan. 0.0 - 96.0m.",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "Angle, in radians, from the local x-axis of the prim to scan.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 28,
		"return": "void",
		"sleep": 0,
		"tooltip": "Performs a single scan for Name and ID with Type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within Range meters and Arc radians of forward vector.\\nSpecifying a blank Name, 0 Type, or NULL_KEY ID will prevent filtering results based on that parameter. A range of 0.0 does not perform a scan.\\nResults are returned in the sensor and no_sensor events."
	},
	"llSensorRemove": {
		"arguments": [],
		"energy": 10,
		"func-id": 30,
		"return": "void",
		"sleep": 0,
		"tooltip": "removes sensor.\\nRemoves the sensor set by llSensorRepeat."
	},
	"llSensorRepeat": {
		"arguments": [
			{
				"Name": {
					"tooltip": "Object or avatar name.",
					"type": "string"
				}
			},
			{
				"ID": {
					"tooltip": "Object or avatar UUID.",
					"type": "key"
				}
			},
			{
				"Type": {
					"tooltip": "Bit-field mask of AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED",
					"type": "integer"
				}
			},
			{
				"Range": {
					"tooltip": "Distance to scan. 0.0 - 96.0m.",
					"type": "float"
				}
			},
			{
				"Arc": {
					"tooltip": "Angle, in radians, from the local x-axis of the prim to scan.",
					"type": "float"
				}
			},
			{
				"Rate": {
					"tooltip": "Period, in seconds, between scans.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 29,
		"return": "void",
		"sleep": 0,
		"tooltip": "Initiates a periodic scan every Rate seconds, for Name and ID with Type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within Range meters and Arc radians of forward vector.\\nSpecifying a blank Name, 0 Type, or NULL_KEY ID will prevent filtering results based on that parameter. A range of 0.0 does not perform a scan.\\nResults are returned in the sensor and no_sensor events."
	},
	"llSetAgentEnvironment": {
		"arguments": [
			{
				"agent_id": {
					"tooltip": "Agent to receive new environment settings.",
					"type": "key"
				}
			},
			{
				"transition": {
					"tooltip": "Number of seconds over which to apply new settings.",
					"type": "float"
				}
			},
			{
				"Settings": {
					"tooltip": "List of environment settings to replace for agent.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 714,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Sets an agent's environmental values to the specified values. Must be used as part of an experience."
	},
	"llSetAgentRot": {
		"arguments": [
			{
				"rot": {
					"tooltip": "Rotation to turn the avatar to face.",
					"type": "rotation"
				}
			},
			{
				"flags": {
					"tooltip": "flags",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 515,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the avatar rotation to the given value."
	},
	"llSetAlpha": {
		"arguments": [
			{
				"Opacity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 51,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the alpha (opacity) of Face.\\nSets the alpha (opacity) value for Face. If Face is ALL_SIDES, sets the alpha for all faces. The alpha value is interpreted as an opacity percentage (1.0 is fully opaque, and 0.2 is mostly transparent). This function will clamp alpha values less than 0.1 to 0.1 and greater than 1.0 to 1."
	},
	"llSetAngularVelocity": {
		"arguments": [
			{
				"AngVel": {
					"tooltip": "The angular velocity to set the object to.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "If TRUE, the AngVel is treated as a local directional vector instead of a regional directional vector.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 379,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets an object's angular velocity to AngVel, in local coordinates if Local == TRUE (if the script is physical).\\nHas no effect on non-physical objects."
	},
	"llSetAnimationOverride": {
		"arguments": [
			{
				"AnimationState": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"AnimationName": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 501,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the animation (in object inventory) that will play for the given animation state.\\nTo use this function the script must obtain the PERMISSION_OVERRIDE_ANIMATIONS permission."
	},
	"llSetBuoyancy": {
		"arguments": [
			{
				"Buoyancy": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 122,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set the tasks buoyancy (0 is none, < 1.0 sinks, 1.0 floats, > 1.0 rises).\\nSet the object buoyancy. A value of 0 is none, less than 1.0 sinks, 1.0 floats, and greater than 1.0 rises."
	},
	"llSetCameraAtOffset": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 244,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the camera used in this object, at offset, if an avatar sits on it.\\nSets the offset that an avatar's camera will be moved to if the avatar sits on the object."
	},
	"llSetCameraEyeOffset": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 243,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the camera eye offset used in this object if an avatar sits on it."
	},
	"llSetCameraParams": {
		"arguments": [
			{
				"Parameters": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 313,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets multiple camera parameters at once. List format is [ rule-1, data-1, rule-2, data-2 . . . rule-n, data-n ]."
	},
	"llSetClickAction": {
		"arguments": [
			{
				"Action": {
					"tooltip": "A CLICK_ACTION_* flag",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 333,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the action performed when a prim is clicked upon."
	},
	"llSetColor": {
		"arguments": [
			{
				"Color": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 49,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the color, for the face.\\nSets the color of the side specified. If Face is ALL_SIDES, sets the color on all faces."
	},
	"llSetContentType": {
		"arguments": [
			{
				"HTTPRequestID": {
					"tooltip": "A valid http_request() key",
					"type": "key"
				}
			},
			{
				"ContentType": {
					"tooltip": "Media type to use with any following llHTTPResponse(HTTPRequestID, ...)",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 374,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set the media type of an LSL HTTP server response to ContentType.\\nHTTPRequestID must be a valid http_request ID. ContentType must be one of the CONTENT_TYPE_* constants."
	},
	"llSetDamage": {
		"arguments": [
			{
				"Damage": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 157,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the amount of damage that will be done to an avatar that this task hits.\tTask will be killed.\\nSets the amount of damage that will be done to an avatar that this object hits. This object will be destroyed on damaging an avatar, and no collision event is triggered."
	},
	"llSetEnvironment": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Location within the region.",
					"type": "vector"
				}
			},
			{
				"EnvParams": {
					"tooltip": "List of environment settings to change for the specified parcel location.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 717,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns a string with the requested data about the region."
	},
	"llSetExperienceKey": {
		"arguments": [
			{
				"ExperienceID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 386,
		"private": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": ""
	},
	"llSetForce": {
		"arguments": [
			{
				"Force": {
					"tooltip": "Directional force.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "Boolean, if TRUE uses local axis, if FALSE uses region axis.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 64,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets Force on object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects."
	},
	"llSetForceAndTorque": {
		"arguments": [
			{
				"Force": {
					"tooltip": "Directional force.",
					"type": "vector"
				}
			},
			{
				"Torque": {
					"tooltip": "Torque force.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "Boolean, if TRUE uses local axis, if FALSE uses region axis.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 76,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the Force and Torque of object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects."
	},
	"llSetGroundTexture": {
		"arguments": [
			{
				"Changes": {
					"tooltip": "A list of ground texture properties to change.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 558,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Changes terrain texture properties in the region."
	},
	"llSetHoverHeight": {
		"arguments": [
			{
				"Height": {
					"tooltip": "Distance above the ground.",
					"type": "float"
				}
			},
			{
				"Water": {
					"tooltip": "Boolean, if TRUE then hover above water too.",
					"type": "integer"
				}
			},
			{
				"Tau": {
					"tooltip": "Seconds to critically damp in.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 123,
		"return": "void",
		"sleep": 0,
		"tooltip": "Critically damps a physical object to a Height (either above ground level or above the higher of land and water if water == TRUE).\\nDo not use with vehicles. Use llStopHover to stop hovering."
	},
	"llSetInventoryPermMask": {
		"arguments": [
			{
				"InventoryItem": {
					"tooltip": "An item in the prim's inventory",
					"type": "string"
				}
			},
			{
				"PermissionFlag": {
					"tooltip": "MASK_* flag",
					"type": "integer"
				}
			},
			{
				"PermissionMask": {
					"tooltip": "Permission bit-field (PERM_* flags)",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 290,
		"god-mode": true,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the given permission mask to the new value on the inventory item."
	},
	"llSetKeyframedMotion": {
		"arguments": [
			{
				"Keyframes": {
					"tooltip": "Strided keyframe list of the form: position, orientation, time. Each keyframe is interpreted relative to the previous transform of the object.",
					"type": "list"
				}
			},
			{
				"Options": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 394,
		"return": "void",
		"sleep": 0,
		"tooltip": "Requests that a non-physical object be key-framed according to key-frame list.\\nSpecify a list of times, positions, and orientations to be followed by an object. The object will be smoothly moved between key-frames by the simulator. Collisions with other non-physical or key-framed objects will be ignored (no script events will fire and collision processing will not occur). Collisions with physical objects will be computed and reported, but the key-framed object will be unaffected by those collisions.\\nKeyframes is a strided list containing positional, rotational, and time data for each step in the motion.  Options is a list containing optional arguments and parameters (specified by KFM_* constants)."
	},
	"llSetLinkAlpha": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Opacity": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 274,
		"return": "void",
		"sleep": 0,
		"tooltip": "If a prim exists in the link chain at LinkNumber, set Face to Opacity.\\nSets the Face, on the linked prim specified, to the Opacity."
	},
	"llSetLinkCamera": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Prim link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"EyeOffset": {
					"tooltip": "Offset, relative to the object's centre and expressed in local coordinates, that the camera looks from.",
					"type": "vector"
				}
			},
			{
				"LookOffset": {
					"tooltip": "Offset, relative to the object's centre and expressed in local coordinates, that the camera looks toward.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 377,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim."
	},
	"llSetLinkColor": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			},
			{
				"Color": {
					"tooltip": "Color in RGB <R.R, G.G, B.B>",
					"type": "vector"
				}
			},
			{
				"Face": {
					"tooltip": "Side number or ALL_SIDES.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 140,
		"return": "void",
		"sleep": 0,
		"tooltip": "If a task exists in the link chain at LinkNumber, set the Face to color.\\nSets the color of the linked child's side, specified by LinkNumber."
	},
	"llSetLinkGLTFOverrides": {
		"arguments": [
			{
				"link": {
					"tooltip": "Link number to check.",
					"type": "integer"
				}
			},
			{
				"face": {
					"tooltip": "Side to check for a PBR material. Use ALL_SIDES to check for all.",
					"type": "integer"
				}
			},
			{
				"options": {
					"tooltip": "List of individual overrides to set.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 560,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets or changes GLTF Overrides set on the selected faces."
	},
	"llSetLinkMedia": {
		"arguments": [
			{
				"Link": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims).",
					"type": "integer"
				}
			},
			{
				"Face": {
					"tooltip": "Face number.",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "A set of name/value pairs (in no particular order)",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 371,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Set the media parameters for a particular face on linked prim, specified by Link. Returns an integer that is a STATUS_* flag which details the success/failure of the operation(s).\\nMediaParameters is a set of name/value pairs in no particular order. Parameters not specified are unchanged, or if new media is added then set to the default specified."
	},
	"llSetLinkPrimitiveParams": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 328,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Set primitive parameters for LinkNumber based on Parameters.\\nSets the parameters (or properties) of any linked prim in one step."
	},
	"llSetLinkPrimitiveParamsFast": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag",
					"type": "integer"
				}
			},
			{
				"Parameters": {
					"tooltip": "",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 353,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set primitive parameters for LinkNumber based on Parameters, without a delay.\\nSet parameters for link number, from the list of Parameters, with no built-in script sleep. This function is identical to llSetLinkPrimitiveParams, except without the delay."
	},
	"llSetLinkRenderMaterial": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"RenderMaterial": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 762,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the Render Material of Face on a linked prim, specified by LinkNumber. Render Materail may be a UUID or name of a material in prim inventory."
	},
	"llSetLinkSitFlags": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag.",
					"type": "integer"
				}
			},
			{
				"Flags": {
					"tooltip": "The new set of sit flags to apply to the specified prims in this linkset.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 550,
		"return": "void",
		"sleep": 0,
		"tooltip": "Returns the sit flags set on the specified prim in a linkset."
	},
	"llSetLinkTexture": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 329,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the Texture of Face on a linked prim, specified by LinkNumber. Texture may be a UUID or name of a texture in prim inventory."
	},
	"llSetLinkTextureAnim": {
		"arguments": [
			{
				"LinkNumber": {
					"tooltip": "Link number (0: unlinked, 1: root prim, >1: child prims) or a LINK_* flag to effect",
					"type": "integer"
				}
			},
			{
				"Mode": {
					"tooltip": "Bitmask of animation options.",
					"type": "integer"
				}
			},
			{
				"Face": {
					"tooltip": "Specifies which object face to animate or ALL_SIDES.",
					"type": "integer"
				}
			},
			{
				"SizeX": {
					"tooltip": "Horizontal frames (ignored for ROTATE and SCALE).",
					"type": "integer"
				}
			},
			{
				"SizeY": {
					"tooltip": "Vertical frames (ignored for ROTATE and SCALE).",
					"type": "integer"
				}
			},
			{
				"Start": {
					"tooltip": "Start position/frame number (or radians for ROTATE).",
					"type": "float"
				}
			},
			{
				"Length": {
					"tooltip": "Specifies the animation duration, in frames (or radians for ROTATE).",
					"type": "float"
				}
			},
			{
				"Rate": {
					"tooltip": "Specifies the animation playback rate, in frames per second (must be greater than zero).",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 356,
		"return": "void",
		"sleep": 0,
		"tooltip": "Animates a texture on the prim specified by LinkNumber, by setting the texture scale and offset.\\nMode is a bitmask of animation options.\\nFace specifies which object face to animate.\\nSizeX and SizeY specify the number of horizontal and vertical frames.Start specifes the animation start point.\\nLength specifies the animation duration.\\nRate specifies the animation playback rate."
	},
	"llSetLocalRot": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 284,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Sets the rotation of a child prim relative to the root prim."
	},
	"llSetMemoryLimit": {
		"arguments": [
			{
				"Limit": {
					"tooltip": "The amount to reserve, which must be less than the allowed maximum (currently 64KB) and not already have been exceeded.",
					"type": "integer"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 369,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Requests Limit bytes to be reserved for this script.\\nReturns TRUE or FALSE indicating whether the limit was set successfully.\\nThis function has no effect if the script is running in the LSO VM."
	},
	"llSetObjectDesc": {
		"arguments": [
			{
				"Description": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 271,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the description of the prim to Description.\\nThe description field is limited to 127 characters."
	},
	"llSetObjectName": {
		"arguments": [
			{
				"Name": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 203,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the prim's name to Name."
	},
	"llSetObjectPermMask": {
		"arguments": [
			{
				"PermissionFlag": {
					"tooltip": "MASK_* flag",
					"type": "integer"
				}
			},
			{
				"PermissionMask": {
					"tooltip": "Permission bit-field (PERM_* flags)",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 288,
		"god-mode": true,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the specified PermissionFlag permission to the value specified by PermissionMask on the object the script is attached to."
	},
	"llSetParcelMusicURL": {
		"arguments": [
			{
				"URL": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 267,
		"return": "void",
		"sleep": 2,
		"tooltip": "Sets the streaming audio URL for the parcel the object is on.\\nThe object must be owned by the owner of the parcel; if the parcel is group owned the object must be owned by that group."
	},
	"llSetPayPrice": {
		"arguments": [
			{
				"Price": {
					"tooltip": "The default price shown in the textu input field.",
					"type": "integer"
				}
			},
			{
				"QuickButtons": {
					"tooltip": "Specifies the 4 payment values shown in the payment dialog's buttons (or PAY_HIDE).",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 302,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the default amount when someone chooses to pay this object.\\nPrice is the default price shown in the textu input field.  QuickButtons specifies the 4 payment values shown in the payment dialog's buttons.\\nInput field and buttons may be hidden with PAY_HIDE constant, and may be set to their default values using PAY_DEFAULT."
	},
	"llSetPhysicsMaterial": {
		"arguments": [
			{
				"MaterialBits": {
					"tooltip": "A bitmask specifying which of the parameters in the other arguments should be applied to the object.",
					"type": "integer"
				}
			},
			{
				"GravityMultiplier": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Restitution": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Friction": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Density": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 380,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the selected parameters of the object's physics behavior.\\nMaterialBits is a bitmask specifying which of the parameters in the other arguments should be applied to the object. GravityMultiplier, Restitution, Friction, and Density are the possible parameters to manipulate."
	},
	"llSetPos": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Region coordinates to move to (within 10m).",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 58,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "If the object is not physical, this function sets the position of the prim.\\nIf the script is in a child prim, Position is treated as root relative and the link-set is adjusted.\\nIf the prim is the root prim, the entire object is moved (up to 10m) to Position in region coordinates."
	},
	"llSetPrimMediaParams": {
		"arguments": [
			{
				"Face": {
					"tooltip": "Face number",
					"type": "integer"
				}
			},
			{
				"MediaParameters": {
					"tooltip": "A set of name/value pairs (in no particular order)",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 350,
		"return": "integer",
		"sleep": 1,
		"tooltip": "Sets the MediaParameters for a particular Face on the prim. Returns an integer that is a STATUS_* flag which details the success/failure of the operation(s).\\nMediaParameters is a set of name/value pairs in no particular order. Parameters not specified are unchanged, or if new media is added then set to the default specified."
	},
	"llSetPrimURL": {
		"arguments": [
			{
				"URL": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 305,
		"return": "void",
		"sleep": 20,
		"tooltip": "Deprecated: Use llSetPrimMediaParams instead."
	},
	"llSetPrimitiveParams": {
		"arguments": [
			{
				"Parameters": {
					"tooltip": "A list of changes.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 259,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "This function changes the many properties (or \"parameters\") of a prim in one operation. Parameters is a list of changes."
	},
	"llSetRegionPos": {
		"arguments": [
			{
				"Position": {
					"tooltip": "Vector. The location to move to, in region coordinates.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 397,
		"return": "integer",
		"bool_semantics": true,
		"sleep": 0,
		"tooltip": "Attempts to move the object so that the root prim is within 0.1m of Position.\\nReturns an integer boolean, TRUE if the object is successfully placed within 0.1 m of Position, FALSE otherwise.\\nPosition may be any location within the region or up to 10m across a region border.\\nIf the position is below ground, it will be set to the ground level at that x,y location."
	},
	"llSetRemoteScriptAccessPin": {
		"arguments": [
			{
				"PIN": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 252,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "If PIN is set to a non-zero number, the task will accept remote script loads via llRemoteLoadScriptPin() if it passes in the correct PIN. Othersise, llRemoteLoadScriptPin() is ignored."
	},
	"llSetRenderMaterial": {
		"arguments": [
			{
				"Material": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 761,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Applies Render Material to Face of prim.\\nRender Material may be a UUID or name of a material in prim inventory.\\nIf Face is ALL_SIDES, set the render material on all faces."
	},
	"llSetRot": {
		"arguments": [
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 61,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "If the object is not physical, this function sets the rotation of the prim.\\nIf the script is in a child prim, Rotation is treated as root relative and the link-set is adjusted.\\nIf the prim is the root prim, the entire object is rotated to Rotation in the global reference frame."
	},
	"llSetScale": {
		"arguments": [
			{
				"Scale": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 47,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the prim's scale (size) to Scale."
	},
	"llSetScriptState": {
		"arguments": [
			{
				"ScriptName": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Running": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 148,
		"return": "void",
		"sleep": 0,
		"tooltip": "Enable or disable the script Running state of Script in the prim."
	},
	"llSetSitText": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 242,
		"return": "void",
		"sleep": 0,
		"tooltip": "Displays Text rather than 'Sit' in the viewer's context menu."
	},
	"llSetSoundQueueing": {
		"arguments": [
			{
				"QueueEnable": {
					"tooltip": "Boolean, sound queuing: TRUE enables, FALSE disables (default).",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 208,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets whether successive calls to llPlaySound, llLoopSound, etc., (attached sounds) interrupt the currently playing sound.\\nThe default for objects is FALSE. Setting this value to TRUE will make the sound wait until the current playing sound reaches its end. The queue is one level deep."
	},
	"llSetSoundRadius": {
		"arguments": [
			{
				"Radius": {
					"tooltip": "Maximum distance that sounds can be heard.",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 209,
		"return": "void",
		"sleep": 0,
		"tooltip": "Limits radius for audibility of scripted sounds (both attached and triggered) to distance Radius."
	},
	"llSetStatus": {
		"arguments": [
			{
				"Status": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 45,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets object status specified in Status bitmask (e.g. STATUS_PHYSICS|STATUS_PHANTOM) to boolean Value.\\nFor a full list of STATUS_* constants, see wiki documentation."
	},
	"llSetText": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Color": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Opacity": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 152,
		"return": "void",
		"sleep": 0,
		"tooltip": "Causes Text to float above the prim, using the specified Color and Opacity."
	},
	"llSetTexture": {
		"arguments": [
			{
				"Texture": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Face": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 53,
		"return": "void",
		"sleep": 0.2,
		"tooltip": "Applies Texture to Face of prim.\\nTexture may be a UUID or name of a texture in prim inventory.\\nIf Face is ALL_SIDES, set the texture on all faces."
	},
	"llSetTextureAnim": {
		"arguments": [
			{
				"Mode": {
					"tooltip": "Mask of Mode flags.",
					"type": "integer"
				}
			},
			{
				"Face": {
					"tooltip": "Face number or ALL_SIDES.",
					"type": "integer"
				}
			},
			{
				"SizeX": {
					"tooltip": "Horizontal frames (ignored for ROTATE and SCALE).",
					"type": "integer"
				}
			},
			{
				"SizeY": {
					"tooltip": "Vertical frames (ignored for ROTATE and SCALE).",
					"type": "integer"
				}
			},
			{
				"Start": {
					"tooltip": "Start position/frame number (or radians for ROTATE).",
					"type": "float"
				}
			},
			{
				"Length": {
					"tooltip": "number of frames to display (or radians for ROTATE).",
					"type": "float"
				}
			},
			{
				"Rate": {
					"tooltip": "Frames per second (must not greater than zero).",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 211,
		"return": "void",
		"sleep": 0,
		"tooltip": "Animates a texture by setting the texture scale and offset.\\nMode is a bitmask of animation options.\\nFace specifies which object face to animate.\\nSizeX and SizeY specify the number of horizontal and vertical frames.Start specifes the animation start point.\\nLength specifies the animation duration.\\nRate specifies the animation playback rate."
	},
	"llSetTimerEvent": {
		"arguments": [
			{
				"Rate": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 107,
		"return": "void",
		"sleep": 0,
		"tooltip": "Causes the timer event to be triggered every Rate seconds.\\n Passing in 0.0 stops further timer events."
	},
	"llSetTorque": {
		"arguments": [
			{
				"Torque": {
					"tooltip": "Torque force.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "Boolean, if TRUE uses local axis, if FALSE uses region axis.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 74,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets the Torque acting on the script's object, in object-local coordinates if Local == TRUE (otherwise, the region reference frame is used).\\nOnly works on physical objects."
	},
	"llSetTouchText": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 241,
		"return": "void",
		"sleep": 0,
		"tooltip": "Displays Text in the viewer context menu that acts on a touch."
	},
	"llSetVehicleFlags": {
		"arguments": [
			{
				"Flags": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 236,
		"return": "void",
		"sleep": 0,
		"tooltip": "Enables the vehicle flags specified in the Flags bitmask.\\nValid parameters can be found in the wiki documentation."
	},
	"llSetVehicleFloatParam": {
		"arguments": [
			{
				"ParameterName": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"ParameterValue": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 233,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets a vehicle float parameter.\\nValid parameters can be found in the wiki documentation."
	},
	"llSetVehicleRotationParam": {
		"arguments": [
			{
				"ParameterName": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"ParameterValue": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 235,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets a vehicle rotation parameter.\\nValid parameters can be found in the wiki documentation."
	},
	"llSetVehicleType": {
		"arguments": [
			{
				"Type": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 232,
		"return": "void",
		"sleep": 0,
		"tooltip": "Activates the vehicle action on the object with vehicle preset Type.\\nValid Types and an explanation of their characteristics can be found in wiki documentation."
	},
	"llSetVehicleVectorParam": {
		"arguments": [
			{
				"ParameterName": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"ParameterValue": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 234,
		"return": "void",
		"sleep": 0,
		"tooltip": "Sets a vehicle vector parameter.\\nValid parameters can be found in the wiki documentation."
	},
	"llSetVelocity": {
		"arguments": [
			{
				"Velocity": {
					"tooltip": "The velocity to apply.",
					"type": "vector"
				}
			},
			{
				"Local": {
					"tooltip": "If TRUE, the Velocity is treated as a local directional vector instead of a regional directional vector.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 378,
		"return": "void",
		"sleep": 0,
		"tooltip": "If the object is physics-enabled, sets the object's linear velocity to Velocity.\\nIf Local==TRUE, Velocity is treated as a local directional vector; otherwise, Velocity is treated as a global directional vector."
	},
	"llShout": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 24,
		"return": "void",
		"sleep": 0,
		"tooltip": "Shouts Text on Channel.\\nThis chat method has a range of 100m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts."
	},
	"llSignRSA": {
		"arguments": [
			{
				"PrivateKey": {
					"tooltip": "The PEM-formatted private key",
					"type": "string"
				}
			},
			{
				"Message": {
					"tooltip": "The message contents to sign",
					"type": "string"
				}
			},
			{
				"Algorithm": {
					"tooltip": "The digest algorithnm to use: sha1, sha224, sha256, sha384, sha512",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 539,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the base64-encoded RSA signature of Message using PEM-formatted PrivateKey and digest Algorithm (sha1, sha224, sha256, sha384, sha512)."
	},
	"llSin": {
		"arguments": [
			{
				"Theta": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 0,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the sine of Theta (Theta in radians)."
	},
	"llSitOnLink": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"LinkID": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 503,
		"return": "integer",
		"sleep": 0,
		"tooltip": "If agent identified by AvatarID is participating in the experience, sit them on the specified link's sit target."
	},
	"llSitTarget": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Rotation": {
					"tooltip": "",
					"type": "rotation"
				}
			}
		],
		"energy": 10,
		"func-id": 238,
		"return": "void",
		"sleep": 0,
		"tooltip": "Set the sit location for this object. If offset == ZERO_VECTOR, clears the sit target."
	},
	"llSleep": {
		"arguments": [
			{
				"Time": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 0,
		"func-id": 108,
		"return": "void",
		"sleep": 0,
		"tooltip": "Put script to sleep for Time seconds."
	},
	"llSound": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Queue": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Loop": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 85,
		"return": "void",
		"sleep": 0,
		"tooltip": "Deprecated: Use llPlaySound instead.\\nPlays Sound at Volume and specifies whether the sound should loop and/or be enqueued."
	},
	"llSoundPreload": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 126,
		"return": "void",
		"sleep": 0,
		"tooltip": "Deprecated: Use llPreloadSound instead.\\nPreloads a sound on viewers within range."
	},
	"llSqrt": {
		"arguments": [
			{
				"Value": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 4,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the square root of Value.\\nTriggers a math runtime error for imaginary results (if Value < 0.0)."
	},
	"llStartAnimation": {
		"arguments": [
			{
				"Animation": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 129,
		"return": "void",
		"sleep": 0,
		"tooltip": "This function plays the specified animation from playing on the avatar who received the script's most recent permissions request.\\nAnimation may be an animation in task inventory or a built-in animation.\\nRequires PERMISSION_TRIGGER_ANIMATION."
	},
	"llStartObjectAnimation": {
		"arguments": [
			{
				"Animation": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 504,
		"return": "void",
		"sleep": 0,
		"tooltip": "This function plays the specified animation on the rigged mesh object associated with the current script.\\nAnimation may be an animation in task inventory or a built-in animation.\\n"
	},
	"llStopAnimation": {
		"arguments": [
			{
				"Animation": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 130,
		"return": "void",
		"sleep": 0,
		"tooltip": "This function stops the specified animation on the avatar who received the script's most recent permissions request.\\nAnimation may be an animation in task inventory, a built-in animation, or the uuid of an animation.\\nRequires PERMISSION_TRIGGER_ANIMATION."
	},
	"llStopHover": {
		"arguments": [],
		"energy": 10,
		"func-id": 124,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stop hovering to a height (due to llSetHoverHeight())."
	},
	"llStopLookAt": {
		"arguments": [],
		"energy": 10,
		"func-id": 106,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stop causing object to point at a target (due to llLookAt() or llRotLookAt())."
	},
	"llStopMoveToTarget": {
		"arguments": [],
		"energy": 10,
		"func-id": 71,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stops critically damped motion (due to llMoveToTarget())."
	},
	"llStopObjectAnimation": {
		"arguments": [
			{
				"Animation": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 505,
		"return": "void",
		"sleep": 0,
		"tooltip": "This function stops the specified animation on the rigged mesh object associated with the current script.\\nAnimation may be an animation in task inventory, a built-in animation, or the uuid of an animation.\\n"
	},
	"llStopPointAt": {
		"arguments": [],
		"deprecated": true,
		"energy": 10,
		"func-id": 132,
		"private": true,
		"return": "void",
		"sleep": 0,
		"tooltip": ""
	},
	"llStopSound": {
		"arguments": [],
		"energy": 10,
		"func-id": 92,
		"return": "void",
		"sleep": 0,
		"tooltip": "Stops playback of the currently attached sound."
	},
	"llStringLength": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 128,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer that is the number of characters in Text (not counting the null)."
	},
	"llStringToBase64": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 260,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the string Base64 representation of the input string."
	},
	"llStringTrim": {
		"arguments": [
			{
				"Text": {
					"tooltip": "String to trim",
					"type": "string"
				}
			},
			{
				"TrimType": {
					"tooltip": "STRING_TRIM_HEAD, STRING_TRIM_TAIL, or STRING_TRIM.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 330,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Outputs a string, eliminating white-space from the start and/or end of the input string Text.\\nValid options for TrimType:\\nSTRING_TRIM_HEAD: trim all leading spaces in Text\\nSTRING_TRIM_TAIL: trim all trailing spaces in Text\\nSTRING_TRIM: trim all leading and trailing spaces in Text."
	},
	"llSubStringIndex": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Sequence": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 181,
		"index_semantics": true,
		"pure": true,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns an integer that is the index in Text where string pattern Sequence first appears. Returns -1 if not found."
	},
	"llTakeCamera": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 115,
		"return": "void",
		"sleep": 0,
		"tooltip": "Deprecated: Use llSetCameraParams instead."
	},
	"llTakeControls": {
		"arguments": [
			{
				"Controls": {
					"tooltip": "Bit-field of CONTROL_* flags.",
					"type": "integer"
				}
			},
			{
				"Accept": {
					"tooltip": "Boolean, determines whether control events are generated.",
					"type": "integer"
				}
			},
			{
				"PassOn": {
					"tooltip": "Boolean, determines whether controls are disabled.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 111,
		"return": "void",
		"sleep": 0,
		"tooltip": "Take controls from the agent the script has permissions for.\\nIf (Accept == (Controls & input)), send input to the script.  PassOn determines whether Controls also perform their normal functions.\\nRequires the PERMISSION_TAKE_CONTROLS permission to run."
	},
	"llTan": {
		"arguments": [
			{
				"Theta": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 2,
		"native": true,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the tangent of Theta (Theta in radians)."
	},
	"llTarget": {
		"arguments": [
			{
				"Position": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Range": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 66,
		"return": "integer",
		"sleep": 0,
		"tooltip": "This function is to have the script know when it has reached a position.\\nIt registers a Position with a Range that triggers at_target and not_at_target events continuously until unregistered."
	},
	"llTargetOmega": {
		"arguments": [
			{
				"Axis": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"SpinRate": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"Gain": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 133,
		"return": "void",
		"sleep": 0,
		"tooltip": "Attempt to spin at SpinRate with strength Gain on Axis.\\nA spin rate of 0.0 cancels the spin. This function always works in object-local coordinates."
	},
	"llTargetRemove": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 67,
		"return": "void",
		"sleep": 0,
		"tooltip": "Removes positional target Handle registered with llTarget."
	},
	"llTargetedEmail": {
		"arguments": [
			{
				"Target": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Subject": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 750,
		"return": "void",
		"sleep": 20,
		"tooltip": "Sends an email with Subject and Message to the owner or creator of an object ."
	},
	"llTeleportAgent": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "UUID of avatar.",
					"type": "key"
				}
			},
			{
				"LandmarkName": {
					"tooltip": "Name of landmark (in object contents), or empty string, to use.",
					"type": "string"
				}
			},
			{
				"Position": {
					"tooltip": "If no landmark was provided, the position within the current region to teleport the avatar to.",
					"type": "vector"
				}
			},
			{
				"LookAtPoint": {
					"tooltip": "The position within the target region that the avatar should be turned to face upon arrival.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 368,
		"return": "void",
		"sleep": 0,
		"tooltip": "Requests a teleport of avatar to a landmark stored in the object's inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the position given by look_at in local coordinates.\\nRequires the PERMISSION_TELEPORT permission. This function can only teleport the owner of the object."
	},
	"llTeleportAgentGlobalCoords": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "UUID of avatar.",
					"type": "key"
				}
			},
			{
				"GlobalPosition": {
					"tooltip": "Global coordinates of the destination region. Can be retrieved by using llRequestSimulatorData(region_name, DATA_SIM_POS).",
					"type": "vector"
				}
			},
			{
				"RegionPosition": {
					"tooltip": "The position within the target region to teleport the avatar to, if no landmark was provided.",
					"type": "vector"
				}
			},
			{
				"LookAtPoint": {
					"tooltip": "The position within the target region that the avatar should be turned to face upon arrival.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 414,
		"return": "void",
		"sleep": 0,
		"tooltip": "Teleports an agent to the RegionPosition local coordinates within a region which is specified by the GlobalPosition global coordinates. The agent lands facing the position defined by LookAtPoint local coordinates.\\nRequires the PERMISSION_TELEPORT permission. This function can only teleport the owner of the object."
	},
	"llTeleportAgentHome": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 100,
		"func-id": 158,
		"return": "void",
		"sleep": 5,
		"tooltip": "Teleport agent over the owner's land to agent's home location."
	},
	"llTextBox": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 335,
		"mono_sleep": 0,
		"return": "void",
		"sleep": 1,
		"tooltip": "Opens a dialog for the specified avatar with message Text, which contains a text box for input. Any text that is entered is said on the specified Channel (as if by the avatar) when the \"OK\" button is clicked."
	},
	"llToLower": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 98,
		"native": true,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is Text with all lower-case characters."
	},
	"llToUpper": {
		"arguments": [
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 97,
		"native": true,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns a string that is Text with all upper-case characters."
	},
	"llTransferLindenDollars": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			},
			{
				"Amount": {
					"tooltip": "",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 395,
		"return": "key",
		"sleep": 0,
		"tooltip": "Transfer Amount of linden dollars (L$) from script owner to AvatarID. Returns a key to a corresponding transaction_result event for the success of the transfer.\\nAttempts to send the amount of money to the specified avatar, and trigger a transaction_result event identified by the returned key."
	},
	"llTransferOwnership": {
		"arguments": [
			{
				"AgentID": {
					"tooltip": "An agent in the region.",
					"type": "key"
				}
			},
			{
				"Flags": {
					"tooltip": "Flags to control type of inventory transfer.",
					"type": "integer"
				}
			},
			{
				"Params": {
					"tooltip": "Extra parameters to llTransferOwnership. None are defined at this time.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 519,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Transfers ownership of an object, or a copy of the object to a new agent."
	},
	"llTriggerSound": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			}
		],
		"energy": 10,
		"func-id": 91,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays Sound at Volume (0.0 - 1.0), centered at but not attached to object.\\nThere is no limit to the number of triggered sounds which can be generated by an object, and calling llTriggerSound does not affect the attached sounds created by llPlaySound and llLoopSound. This is very useful for things like collision noises, explosions, etc. There is no way to stop or alter the volume of a sound triggered by this function."
	},
	"llTriggerSoundLimited": {
		"arguments": [
			{
				"Sound": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Volume": {
					"tooltip": "",
					"type": "float"
				}
			},
			{
				"TNE": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"BSW": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 212,
		"return": "void",
		"sleep": 0,
		"tooltip": "Plays Sound at Volume (0.0 - 1.0), centered at but not attached to object, limited to axis-aligned bounding box defined by vectors top-north-east (TNE) and bottom-south-west (BSW).\\nThere is no limit to the number of triggered sounds which can be generated by an object, and calling llTriggerSound does not affect the attached sounds created by llPlaySound and llLoopSound. This is very useful for things like collision noises, explosions, etc. There is no way to stop or alter the volume of a sound triggered by this function."
	},
	"llUnSit": {
		"arguments": [
			{
				"AvatarID": {
					"tooltip": "",
					"type": "key"
				}
			}
		],
		"energy": 10,
		"func-id": 220,
		"return": "void",
		"sleep": 0,
		"tooltip": "If agent identified by AvatarID is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up."
	},
	"llUnescapeURL": {
		"arguments": [
			{
				"URL": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 308,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Returns the string that is the URL unescaped, replacing \"%20\" with spaces, etc., version of URL.\\nThis function can output raw UTF-8 strings."
	},
	"llUpdateCharacter": {
		"arguments": [
			{
				"Options": {
					"tooltip": "Character configuration options. Takes the same constants as llCreateCharacter().",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 406,
		"return": "void",
		"sleep": 0,
		"tooltip": "Updates settings for a pathfinding character."
	},
	"llUpdateKeyValue": {
		"arguments": [
			{
				"Key": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Value": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Checked": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"OriginalValue": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"experience": true,
		"func-id": 389,
		"return": "key",
		"sleep": 0,
		"tooltip": "\n                   Starts an asychronous transaction to update the value associated with the key given. The dataserver callback will be executed with the key returned from this call and a string describing the result. The result is a two element commma-delimited list. The first item is an integer specifying if the transaction succeeded (1) or not (0). In the failure case, the second item will be an integer corresponding to one of the XP_ERROR_... constants. In the success case the second item will be the value associated with the key. If Checked is 1 the existing value in the data store must match the OriginalValue passed or XP_ERROR_RETRY_UPDATE will be returned. If Checked is 0 the key will be created if necessary.\n                "
	},
	"llVecDist": {
		"arguments": [
			{
				"Location1": {
					"tooltip": "",
					"type": "vector"
				}
			},
			{
				"Location2": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 14,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the distance between Location1 and Location2."
	},
	"llVecMag": {
		"arguments": [
			{
				"Vector": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 12,
		"pure": true,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the magnitude of the vector."
	},
	"llVecNorm": {
		"arguments": [
			{
				"Vector": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 13,
		"pure": true,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns normalized vector."
	},
	"llVerifyRSA": {
		"arguments": [
			{
				"PublicKey": {
					"tooltip": "The PEM-formatted public key for signature verifiation.",
					"type": "string"
				}
			},
			{
				"Message": {
					"tooltip": "The message that was signed.",
					"type": "string"
				}
			},
			{
				"Signature": {
					"tooltip": "The base64-formatted signature of the message.",
					"type": "string"
				}
			},
			{
				"Algorithm": {
					"tooltip": "The digest algorithm: sha1, sha224, sha256, sha384, sha512.",
					"type": "string"
				}
			}
		],
		"bool_semantics": true,
		"energy": 10,
		"func-id": 540,
		"return": "integer",
		"sleep": 0,
		"tooltip": "Returns TRUE if PublicKey, Message, and Algorithm produce the same base64-formatted Signature."
	},
	"llVolumeDetect": {
		"arguments": [
			{
				"DetectEnabled": {
					"tooltip": "TRUE enables, FALSE disables.",
					"type": "integer"
				}
			}
		],
		"energy": 10,
		"func-id": 248,
		"return": "void",
		"sleep": 0,
		"tooltip": "If DetectEnabled = TRUE, object becomes phantom but triggers collision_start and collision_end events when other objects start and stop interpenetrating.\\nIf another object (including avatars) interpenetrates it, it will get a collision_start event.\\nWhen an object stops interpenetrating, a collision_end event is generated. While the other is inter-penetrating, collision events are NOT generated."
	},
	"llWanderWithin": {
		"arguments": [
			{
				"Origin": {
					"tooltip": "Central point to wander about.",
					"type": "vector"
				}
			},
			{
				"Area": {
					"tooltip": "Half-extents of an area the character may wander within. (i.e., it can wander from the specified origin by up to +/-Distance.x in x, +/-Distance.y in y, etc.)",
					"type": "vector"
				}
			},
			{
				"Options": {
					"tooltip": "No options available at this time.",
					"type": "list"
				}
			}
		],
		"energy": 10,
		"func-id": 401,
		"return": "void",
		"sleep": 0,
		"tooltip": "Wander within a specified volume.\\nSets a character to wander about a central spot within a specified area."
	},
	"llWater": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 153,
		"return": "float",
		"sleep": 0,
		"tooltip": "Returns the water height below the object position + Offset."
	},
	"llWhisper": {
		"arguments": [
			{
				"Channel": {
					"tooltip": "",
					"type": "integer"
				}
			},
			{
				"Text": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 22,
		"return": "void",
		"sleep": 0,
		"tooltip": "Whispers Text on Channel.\\nThis chat method has a range of 10m radius.\\nPUBLIC_CHANNEL is the public chat channel that all avatars see as chat text. DEBUG_CHANNEL is the script debug channel, and is also visible to nearby avatars. All other channels are are not sent to avatars, but may be used to communicate with scripts."
	},
	"llWind": {
		"arguments": [
			{
				"Offset": {
					"tooltip": "",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 44,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the wind velocity at the object position + Offset."
	},
	"llWorldPosToHUD": {
		"arguments": [
			{
				"world_pos": {
					"tooltip": "The world-frame position to project into HUD space",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 547,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Returns the local position that would put the origin of a HUD object directly over world_pos as viewed by the current camera."
	},
	"llXorBase64": {
		"arguments": [
			{
				"Text1": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Text2": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"energy": 10,
		"func-id": 522,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Performs an exclusive OR on two Base64 strings and returns a Base64 string. Text2 repeats if it is shorter than Text1."
	},
	"llXorBase64Strings": {
		"arguments": [
			{
				"Text1": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Text2": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 262,
		"pure": true,
		"return": "string",
		"sleep": 0.3,
		"tooltip": "Deprecated: Please use llXorBase64 instead.\\nIncorrectly performs an exclusive OR on two Base64 strings and returns a Base64 string. Text2 repeats if it is shorter than Text1.\\nRetained for backwards compatibility."
	},
	"llXorBase64StringsCorrect": {
		"arguments": [
			{
				"Text1": {
					"tooltip": "",
					"type": "string"
				}
			},
			{
				"Text2": {
					"tooltip": "",
					"type": "string"
				}
			}
		],
		"deprecated": true,
		"energy": 10,
		"func-id": 319,
		"pure": true,
		"return": "string",
		"sleep": 0,
		"tooltip": "Deprecated: Please use llXorBase64 instead.\\nCorrectly (unless nulls are present) performs an exclusive OR on two Base64 strings and returns a Base64 string.\\nText2 repeats if it is shorter than Text1."
	},
	"llsRGB2Linear": {
		"arguments": [
			{
				"srgb": {
					"tooltip": "A color in the sRGB colorspace.",
					"type": "vector"
				}
			}
		],
		"energy": 10,
		"func-id": 716,
		"return": "vector",
		"sleep": 0,
		"tooltip": "Converts a color from the sRGB to the linear colorspace."
	}
}